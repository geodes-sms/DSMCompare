/**
 */
package PacmanGoDiffMM.provider;

import PacmanGoDiffMM.util.PacmanGoDiffMMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PacmanGoDiffMMItemProviderAdapterFactory extends PacmanGoDiffMMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PacmanGoDiffMMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.GridNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GridNodeItemProvider gridNodeItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.GridNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGridNodeAdapter() {
		if (gridNodeItemProvider == null) {
			gridNodeItemProvider = new GridNodeItemProvider(this);
		}

		return gridNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.Food} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FoodItemProvider foodItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.Food}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFoodAdapter() {
		if (foodItemProvider == null) {
			foodItemProvider = new FoodItemProvider(this);
		}

		return foodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.Pacman} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PacmanItemProvider pacmanItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.Pacman}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPacmanAdapter() {
		if (pacmanItemProvider == null) {
			pacmanItemProvider = new PacmanItemProvider(this);
		}

		return pacmanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.Ghost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GhostItemProvider ghostItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.Ghost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGhostAdapter() {
		if (ghostItemProvider == null) {
			ghostItemProvider = new GhostItemProvider(this);
		}

		return ghostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.Scoreboard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScoreboardItemProvider scoreboardItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.Scoreboard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScoreboardAdapter() {
		if (scoreboardItemProvider == null) {
			scoreboardItemProvider = new ScoreboardItemProvider(this);
		}

		return scoreboardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.Game} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GameItemProvider gameItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.Game}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGameAdapter() {
		if (gameItemProvider == null) {
			gameItemProvider = new GameItemProvider(this);
		}

		return gameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DomainSpecificDiff} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainSpecificDiffItemProvider domainSpecificDiffItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DomainSpecificDiff}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainSpecificDiffAdapter() {
		if (domainSpecificDiffItemProvider == null) {
			domainSpecificDiffItemProvider = new DomainSpecificDiffItemProvider(this);
		}

		return domainSpecificDiffItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGridNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGridNodeItemProvider diffGridNodeItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGridNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGridNodeAdapter() {
		if (diffGridNodeItemProvider == null) {
			diffGridNodeItemProvider = new DiffGridNodeItemProvider(this);
		}

		return diffGridNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGridNode_up} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGridNode_upItemProvider diffGridNode_upItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGridNode_up}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGridNode_upAdapter() {
		if (diffGridNode_upItemProvider == null) {
			diffGridNode_upItemProvider = new DiffGridNode_upItemProvider(this);
		}

		return diffGridNode_upItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGridNode_bottom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGridNode_bottomItemProvider diffGridNode_bottomItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGridNode_bottom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGridNode_bottomAdapter() {
		if (diffGridNode_bottomItemProvider == null) {
			diffGridNode_bottomItemProvider = new DiffGridNode_bottomItemProvider(this);
		}

		return diffGridNode_bottomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGridNode_left} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGridNode_leftItemProvider diffGridNode_leftItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGridNode_left}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGridNode_leftAdapter() {
		if (diffGridNode_leftItemProvider == null) {
			diffGridNode_leftItemProvider = new DiffGridNode_leftItemProvider(this);
		}

		return diffGridNode_leftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGridNode_right} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGridNode_rightItemProvider diffGridNode_rightItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGridNode_right}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGridNode_rightAdapter() {
		if (diffGridNode_rightItemProvider == null) {
			diffGridNode_rightItemProvider = new DiffGridNode_rightItemProvider(this);
		}

		return diffGridNode_rightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffFood} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffFoodItemProvider diffFoodItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffFood}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffFoodAdapter() {
		if (diffFoodItemProvider == null) {
			diffFoodItemProvider = new DiffFoodItemProvider(this);
		}

		return diffFoodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffPacman} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffPacmanItemProvider diffPacmanItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffPacman}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffPacmanAdapter() {
		if (diffPacmanItemProvider == null) {
			diffPacmanItemProvider = new DiffPacmanItemProvider(this);
		}

		return diffPacmanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGhost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGhostItemProvider diffGhostItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGhost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGhostAdapter() {
		if (diffGhostItemProvider == null) {
			diffGhostItemProvider = new DiffGhostItemProvider(this);
		}

		return diffGhostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffScoreboard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffScoreboardItemProvider diffScoreboardItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffScoreboard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffScoreboardAdapter() {
		if (diffScoreboardItemProvider == null) {
			diffScoreboardItemProvider = new DiffScoreboardItemProvider(this);
		}

		return diffScoreboardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGame} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGameItemProvider diffGameItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGame}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGameAdapter() {
		if (diffGameItemProvider == null) {
			diffGameItemProvider = new DiffGameItemProvider(this);
		}

		return diffGameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGame_gridnodes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGame_gridnodesItemProvider diffGame_gridnodesItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGame_gridnodes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGame_gridnodesAdapter() {
		if (diffGame_gridnodesItemProvider == null) {
			diffGame_gridnodesItemProvider = new DiffGame_gridnodesItemProvider(this);
		}

		return diffGame_gridnodesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGame_scoreboard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGame_scoreboardItemProvider diffGame_scoreboardItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGame_scoreboard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGame_scoreboardAdapter() {
		if (diffGame_scoreboardItemProvider == null) {
			diffGame_scoreboardItemProvider = new DiffGame_scoreboardItemProvider(this);
		}

		return diffGame_scoreboardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGame_entities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGame_entitiesItemProvider diffGame_entitiesItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGame_entities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGame_entitiesAdapter() {
		if (diffGame_entitiesItemProvider == null) {
			diffGame_entitiesItemProvider = new DiffGame_entitiesItemProvider(this);
		}

		return diffGame_entitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffGame_domainspecificdiffs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffGame_domainspecificdiffsItemProvider diffGame_domainspecificdiffsItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffGame_domainspecificdiffs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffGame_domainspecificdiffsAdapter() {
		if (diffGame_domainspecificdiffsItemProvider == null) {
			diffGame_domainspecificdiffsItemProvider = new DiffGame_domainspecificdiffsItemProvider(this);
		}

		return diffGame_domainspecificdiffsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoDiffMM.DiffPositionableEntity_on} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffPositionableEntity_onItemProvider diffPositionableEntity_onItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoDiffMM.DiffPositionableEntity_on}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffPositionableEntity_onAdapter() {
		if (diffPositionableEntity_onItemProvider == null) {
			diffPositionableEntity_onItemProvider = new DiffPositionableEntity_onItemProvider(this);
		}

		return diffPositionableEntity_onItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (gridNodeItemProvider != null) gridNodeItemProvider.dispose();
		if (foodItemProvider != null) foodItemProvider.dispose();
		if (pacmanItemProvider != null) pacmanItemProvider.dispose();
		if (ghostItemProvider != null) ghostItemProvider.dispose();
		if (scoreboardItemProvider != null) scoreboardItemProvider.dispose();
		if (gameItemProvider != null) gameItemProvider.dispose();
		if (domainSpecificDiffItemProvider != null) domainSpecificDiffItemProvider.dispose();
		if (diffGridNodeItemProvider != null) diffGridNodeItemProvider.dispose();
		if (diffGridNode_upItemProvider != null) diffGridNode_upItemProvider.dispose();
		if (diffGridNode_bottomItemProvider != null) diffGridNode_bottomItemProvider.dispose();
		if (diffGridNode_leftItemProvider != null) diffGridNode_leftItemProvider.dispose();
		if (diffGridNode_rightItemProvider != null) diffGridNode_rightItemProvider.dispose();
		if (diffFoodItemProvider != null) diffFoodItemProvider.dispose();
		if (diffPacmanItemProvider != null) diffPacmanItemProvider.dispose();
		if (diffGhostItemProvider != null) diffGhostItemProvider.dispose();
		if (diffScoreboardItemProvider != null) diffScoreboardItemProvider.dispose();
		if (diffGameItemProvider != null) diffGameItemProvider.dispose();
		if (diffGame_gridnodesItemProvider != null) diffGame_gridnodesItemProvider.dispose();
		if (diffGame_scoreboardItemProvider != null) diffGame_scoreboardItemProvider.dispose();
		if (diffGame_entitiesItemProvider != null) diffGame_entitiesItemProvider.dispose();
		if (diffGame_domainspecificdiffsItemProvider != null) diffGame_domainspecificdiffsItemProvider.dispose();
		if (diffPositionableEntity_onItemProvider != null) diffPositionableEntity_onItemProvider.dispose();
	}

}
