/**
 */
package arduinoDiffMM.provider;

import arduinoDiffMM.util.ArduinoDiffMMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ArduinoDiffMMItemProviderAdapterFactory extends ArduinoDiffMMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ArduinoDiffMMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Hardware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HardwareItemProvider hardwareItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Hardware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHardwareAdapter() {
		if (hardwareItemProvider == null) {
			hardwareItemProvider = new HardwareItemProvider(this);
		}

		return hardwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Platform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlatformItemProvider platformItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Platform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlatformAdapter() {
		if (platformItemProvider == null) {
			platformItemProvider = new PlatformItemProvider(this);
		}

		return platformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DigitalPin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DigitalPinItemProvider digitalPinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DigitalPin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDigitalPinAdapter() {
		if (digitalPinItemProvider == null) {
			digitalPinItemProvider = new DigitalPinItemProvider(this);
		}

		return digitalPinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.AnalogPin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AnalogPinItemProvider analogPinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.AnalogPin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAnalogPinAdapter() {
		if (analogPinItemProvider == null) {
			analogPinItemProvider = new AnalogPinItemProvider(this);
		}

		return analogPinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Sketch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SketchItemProvider sketchItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Sketch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSketchAdapter() {
		if (sketchItemProvider == null) {
			sketchItemProvider = new SketchItemProvider(this);
		}

		return sketchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Project} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectItemProvider projectItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Project}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectAdapter() {
		if (projectItemProvider == null) {
			projectItemProvider = new ProjectItemProvider(this);
		}

		return projectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Status} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StatusItemProvider statusItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Status}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStatusAdapter() {
		if (statusItemProvider == null) {
			statusItemProvider = new StatusItemProvider(this);
		}

		return statusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Level} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LevelItemProvider levelItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Level}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLevelAdapter() {
		if (levelItemProvider == null) {
			levelItemProvider = new LevelItemProvider(this);
		}

		return levelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Delay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DelayItemProvider delayItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Delay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDelayAdapter() {
		if (delayItemProvider == null) {
			delayItemProvider = new DelayItemProvider(this);
		}

		return delayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.InputModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InputModuleItemProvider inputModuleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.InputModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInputModuleAdapter() {
		if (inputModuleItemProvider == null) {
			inputModuleItemProvider = new InputModuleItemProvider(this);
		}

		return inputModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.OutputModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutputModuleItemProvider outputModuleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.OutputModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutputModuleAdapter() {
		if (outputModuleItemProvider == null) {
			outputModuleItemProvider = new OutputModuleItemProvider(this);
		}

		return outputModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Connector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConnectorItemProvider connectorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Connector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConnectorAdapter() {
		if (connectorItemProvider == null) {
			connectorItemProvider = new ConnectorItemProvider(this);
		}

		return connectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Repeat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepeatItemProvider repeatItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Repeat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepeatAdapter() {
		if (repeatItemProvider == null) {
			repeatItemProvider = new RepeatItemProvider(this);
		}

		return repeatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorAdapter() {
		if (sensorItemProvider == null) {
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.While} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WhileItemProvider whileItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.While}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhileAdapter() {
		if (whileItemProvider == null) {
			whileItemProvider = new WhileItemProvider(this);
		}

		return whileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableItemProvider variableItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAdapter() {
		if (variableItemProvider == null) {
			variableItemProvider = new VariableItemProvider(this);
		}

		return variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Set} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetItemProvider setItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Set}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetAdapter() {
		if (setItemProvider == null) {
			setItemProvider = new SetItemProvider(this);
		}

		return setItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.NumericalOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericalOperatorItemProvider numericalOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.NumericalOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericalOperatorAdapter() {
		if (numericalOperatorItemProvider == null) {
			numericalOperatorItemProvider = new NumericalOperatorItemProvider(this);
		}

		return numericalOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.BooleanOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanOperatorItemProvider booleanOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.BooleanOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanOperatorAdapter() {
		if (booleanOperatorItemProvider == null) {
			booleanOperatorItemProvider = new BooleanOperatorItemProvider(this);
		}

		return booleanOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Constant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConstantItemProvider constantItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Constant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConstantAdapter() {
		if (constantItemProvider == null) {
			constantItemProvider = new ConstantItemProvider(this);
		}

		return constantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.If} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IfItemProvider ifItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.If}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIfAdapter() {
		if (ifItemProvider == null) {
			ifItemProvider = new IfItemProvider(this);
		}

		return ifItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionItemProvider functionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionAdapter() {
		if (functionItemProvider == null) {
			functionItemProvider = new FunctionItemProvider(this);
		}

		return functionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.ParameterDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterDefinitionItemProvider parameterDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.ParameterDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterDefinitionAdapter() {
		if (parameterDefinitionItemProvider == null) {
			parameterDefinitionItemProvider = new ParameterDefinitionItemProvider(this);
		}

		return parameterDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.FunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FunctionCallItemProvider functionCallItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.FunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFunctionCallAdapter() {
		if (functionCallItemProvider == null) {
			functionCallItemProvider = new FunctionCallItemProvider(this);
		}

		return functionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.ParameterCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterCallItemProvider parameterCallItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.ParameterCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterCallAdapter() {
		if (parameterCallItemProvider == null) {
			parameterCallItemProvider = new ParameterCallItemProvider(this);
		}

		return parameterCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DomainSpecificDiff} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainSpecificDiffItemProvider domainSpecificDiffItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DomainSpecificDiff}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainSpecificDiffAdapter() {
		if (domainSpecificDiffItemProvider == null) {
			domainSpecificDiffItemProvider = new DomainSpecificDiffItemProvider(this);
		}

		return domainSpecificDiffItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffHardware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffHardwareItemProvider diffHardwareItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffHardware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffHardwareAdapter() {
		if (diffHardwareItemProvider == null) {
			diffHardwareItemProvider = new DiffHardwareItemProvider(this);
		}

		return diffHardwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffHardware_platforms} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffHardware_platformsItemProvider diffHardware_platformsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffHardware_platforms}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffHardware_platformsAdapter() {
		if (diffHardware_platformsItemProvider == null) {
			diffHardware_platformsItemProvider = new DiffHardware_platformsItemProvider(this);
		}

		return diffHardware_platformsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffHardware_modules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffHardware_modulesItemProvider diffHardware_modulesItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffHardware_modules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffHardware_modulesAdapter() {
		if (diffHardware_modulesItemProvider == null) {
			diffHardware_modulesItemProvider = new DiffHardware_modulesItemProvider(this);
		}

		return diffHardware_modulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffHardware_connectors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffHardware_connectorsItemProvider diffHardware_connectorsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffHardware_connectors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffHardware_connectorsAdapter() {
		if (diffHardware_connectorsItemProvider == null) {
			diffHardware_connectorsItemProvider = new DiffHardware_connectorsItemProvider(this);
		}

		return diffHardware_connectorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffPlatform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffPlatformItemProvider diffPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffPlatform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffPlatformAdapter() {
		if (diffPlatformItemProvider == null) {
			diffPlatformItemProvider = new DiffPlatformItemProvider(this);
		}

		return diffPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffPlatform_digitalPins} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffPlatform_digitalPinsItemProvider diffPlatform_digitalPinsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffPlatform_digitalPins}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffPlatform_digitalPinsAdapter() {
		if (diffPlatform_digitalPinsItemProvider == null) {
			diffPlatform_digitalPinsItemProvider = new DiffPlatform_digitalPinsItemProvider(this);
		}

		return diffPlatform_digitalPinsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffPlatform_analogPins} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffPlatform_analogPinsItemProvider diffPlatform_analogPinsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffPlatform_analogPins}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffPlatform_analogPinsAdapter() {
		if (diffPlatform_analogPinsItemProvider == null) {
			diffPlatform_analogPinsItemProvider = new DiffPlatform_analogPinsItemProvider(this);
		}

		return diffPlatform_analogPinsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffDigitalPin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffDigitalPinItemProvider diffDigitalPinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffDigitalPin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffDigitalPinAdapter() {
		if (diffDigitalPinItemProvider == null) {
			diffDigitalPinItemProvider = new DiffDigitalPinItemProvider(this);
		}

		return diffDigitalPinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffAnalogPin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffAnalogPinItemProvider diffAnalogPinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffAnalogPin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffAnalogPinAdapter() {
		if (diffAnalogPinItemProvider == null) {
			diffAnalogPinItemProvider = new DiffAnalogPinItemProvider(this);
		}

		return diffAnalogPinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffSketch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffSketchItemProvider diffSketchItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffSketch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffSketchAdapter() {
		if (diffSketchItemProvider == null) {
			diffSketchItemProvider = new DiffSketchItemProvider(this);
		}

		return diffSketchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffSketch_hardware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffSketch_hardwareItemProvider diffSketch_hardwareItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffSketch_hardware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffSketch_hardwareAdapter() {
		if (diffSketch_hardwareItemProvider == null) {
			diffSketch_hardwareItemProvider = new DiffSketch_hardwareItemProvider(this);
		}

		return diffSketch_hardwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffSketch_instructions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffSketch_instructionsItemProvider diffSketch_instructionsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffSketch_instructions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffSketch_instructionsAdapter() {
		if (diffSketch_instructionsItemProvider == null) {
			diffSketch_instructionsItemProvider = new DiffSketch_instructionsItemProvider(this);
		}

		return diffSketch_instructionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffSketch_functions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffSketch_functionsItemProvider diffSketch_functionsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffSketch_functions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffSketch_functionsAdapter() {
		if (diffSketch_functionsItemProvider == null) {
			diffSketch_functionsItemProvider = new DiffSketch_functionsItemProvider(this);
		}

		return diffSketch_functionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffProjectItemProvider diffProjectItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffProjectAdapter() {
		if (diffProjectItemProvider == null) {
			diffProjectItemProvider = new DiffProjectItemProvider(this);
		}

		return diffProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffProject_hardware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffProject_hardwareItemProvider diffProject_hardwareItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffProject_hardware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffProject_hardwareAdapter() {
		if (diffProject_hardwareItemProvider == null) {
			diffProject_hardwareItemProvider = new DiffProject_hardwareItemProvider(this);
		}

		return diffProject_hardwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffProject_sketch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffProject_sketchItemProvider diffProject_sketchItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffProject_sketch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffProject_sketchAdapter() {
		if (diffProject_sketchItemProvider == null) {
			diffProject_sketchItemProvider = new DiffProject_sketchItemProvider(this);
		}

		return diffProject_sketchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffProject_modules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffProject_modulesItemProvider diffProject_modulesItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffProject_modules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffProject_modulesAdapter() {
		if (diffProject_modulesItemProvider == null) {
			diffProject_modulesItemProvider = new DiffProject_modulesItemProvider(this);
		}

		return diffProject_modulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffProject_platform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffProject_platformItemProvider diffProject_platformItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffProject_platform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffProject_platformAdapter() {
		if (diffProject_platformItemProvider == null) {
			diffProject_platformItemProvider = new DiffProject_platformItemProvider(this);
		}

		return diffProject_platformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffProject_domainspecificdiffs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffProject_domainspecificdiffsItemProvider diffProject_domainspecificdiffsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffProject_domainspecificdiffs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffProject_domainspecificdiffsAdapter() {
		if (diffProject_domainspecificdiffsItemProvider == null) {
			diffProject_domainspecificdiffsItemProvider = new DiffProject_domainspecificdiffsItemProvider(this);
		}

		return diffProject_domainspecificdiffsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffInstruction_previous} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffInstruction_previousItemProvider diffInstruction_previousItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffInstruction_previous}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffInstruction_previousAdapter() {
		if (diffInstruction_previousItemProvider == null) {
			diffInstruction_previousItemProvider = new DiffInstruction_previousItemProvider(this);
		}

		return diffInstruction_previousItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffInstruction_next} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffInstruction_nextItemProvider diffInstruction_nextItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffInstruction_next}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffInstruction_nextAdapter() {
		if (diffInstruction_nextItemProvider == null) {
			diffInstruction_nextItemProvider = new DiffInstruction_nextItemProvider(this);
		}

		return diffInstruction_nextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffStatus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffStatusItemProvider diffStatusItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffStatus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffStatusAdapter() {
		if (diffStatusItemProvider == null) {
			diffStatusItemProvider = new DiffStatusItemProvider(this);
		}

		return diffStatusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffStatus_sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffStatus_sensorItemProvider diffStatus_sensorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffStatus_sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffStatus_sensorAdapter() {
		if (diffStatus_sensorItemProvider == null) {
			diffStatus_sensorItemProvider = new DiffStatus_sensorItemProvider(this);
		}

		return diffStatus_sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffLevel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffLevelItemProvider diffLevelItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffLevel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffLevelAdapter() {
		if (diffLevelItemProvider == null) {
			diffLevelItemProvider = new DiffLevelItemProvider(this);
		}

		return diffLevelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffLevel_level} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffLevel_levelItemProvider diffLevel_levelItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffLevel_level}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffLevel_levelAdapter() {
		if (diffLevel_levelItemProvider == null) {
			diffLevel_levelItemProvider = new DiffLevel_levelItemProvider(this);
		}

		return diffLevel_levelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffModuleInstruction_module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffModuleInstruction_moduleItemProvider diffModuleInstruction_moduleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffModuleInstruction_module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffModuleInstruction_moduleAdapter() {
		if (diffModuleInstruction_moduleItemProvider == null) {
			diffModuleInstruction_moduleItemProvider = new DiffModuleInstruction_moduleItemProvider(this);
		}

		return diffModuleInstruction_moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffControl_instructions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffControl_instructionsItemProvider diffControl_instructionsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffControl_instructions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffControl_instructionsAdapter() {
		if (diffControl_instructionsItemProvider == null) {
			diffControl_instructionsItemProvider = new DiffControl_instructionsItemProvider(this);
		}

		return diffControl_instructionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffDelay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffDelayItemProvider diffDelayItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffDelay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffDelayAdapter() {
		if (diffDelayItemProvider == null) {
			diffDelayItemProvider = new DiffDelayItemProvider(this);
		}

		return diffDelayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffInputModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffInputModuleItemProvider diffInputModuleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffInputModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffInputModuleAdapter() {
		if (diffInputModuleItemProvider == null) {
			diffInputModuleItemProvider = new DiffInputModuleItemProvider(this);
		}

		return diffInputModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffOutputModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffOutputModuleItemProvider diffOutputModuleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffOutputModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffOutputModuleAdapter() {
		if (diffOutputModuleItemProvider == null) {
			diffOutputModuleItemProvider = new DiffOutputModuleItemProvider(this);
		}

		return diffOutputModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffConnectorItemProvider diffConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffConnectorAdapter() {
		if (diffConnectorItemProvider == null) {
			diffConnectorItemProvider = new DiffConnectorItemProvider(this);
		}

		return diffConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffConnector_pin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffConnector_pinItemProvider diffConnector_pinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffConnector_pin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffConnector_pinAdapter() {
		if (diffConnector_pinItemProvider == null) {
			diffConnector_pinItemProvider = new DiffConnector_pinItemProvider(this);
		}

		return diffConnector_pinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffConnector_module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffConnector_moduleItemProvider diffConnector_moduleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffConnector_module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffConnector_moduleAdapter() {
		if (diffConnector_moduleItemProvider == null) {
			diffConnector_moduleItemProvider = new DiffConnector_moduleItemProvider(this);
		}

		return diffConnector_moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffRepeat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffRepeatItemProvider diffRepeatItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffRepeat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffRepeatAdapter() {
		if (diffRepeatItemProvider == null) {
			diffRepeatItemProvider = new DiffRepeatItemProvider(this);
		}

		return diffRepeatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffSensorItemProvider diffSensorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffSensorAdapter() {
		if (diffSensorItemProvider == null) {
			diffSensorItemProvider = new DiffSensorItemProvider(this);
		}

		return diffSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffSensor_status} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffSensor_statusItemProvider diffSensor_statusItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffSensor_status}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffSensor_statusAdapter() {
		if (diffSensor_statusItemProvider == null) {
			diffSensor_statusItemProvider = new DiffSensor_statusItemProvider(this);
		}

		return diffSensor_statusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffWhile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffWhileItemProvider diffWhileItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffWhile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffWhileAdapter() {
		if (diffWhileItemProvider == null) {
			diffWhileItemProvider = new DiffWhileItemProvider(this);
		}

		return diffWhileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffWhile_condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffWhile_conditionItemProvider diffWhile_conditionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffWhile_condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffWhile_conditionAdapter() {
		if (diffWhile_conditionItemProvider == null) {
			diffWhile_conditionItemProvider = new DiffWhile_conditionItemProvider(this);
		}

		return diffWhile_conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffMathOperator_left} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffMathOperator_leftItemProvider diffMathOperator_leftItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffMathOperator_left}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffMathOperator_leftAdapter() {
		if (diffMathOperator_leftItemProvider == null) {
			diffMathOperator_leftItemProvider = new DiffMathOperator_leftItemProvider(this);
		}

		return diffMathOperator_leftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffMathOperator_right} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffMathOperator_rightItemProvider diffMathOperator_rightItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffMathOperator_right}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffMathOperator_rightAdapter() {
		if (diffMathOperator_rightItemProvider == null) {
			diffMathOperator_rightItemProvider = new DiffMathOperator_rightItemProvider(this);
		}

		return diffMathOperator_rightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffVariableItemProvider diffVariableItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffVariableAdapter() {
		if (diffVariableItemProvider == null) {
			diffVariableItemProvider = new DiffVariableItemProvider(this);
		}

		return diffVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffSetItemProvider diffSetItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffSetAdapter() {
		if (diffSetItemProvider == null) {
			diffSetItemProvider = new DiffSetItemProvider(this);
		}

		return diffSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffSet_variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffSet_variableItemProvider diffSet_variableItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffSet_variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffSet_variableAdapter() {
		if (diffSet_variableItemProvider == null) {
			diffSet_variableItemProvider = new DiffSet_variableItemProvider(this);
		}

		return diffSet_variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffSet_value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffSet_valueItemProvider diffSet_valueItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffSet_value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffSet_valueAdapter() {
		if (diffSet_valueItemProvider == null) {
			diffSet_valueItemProvider = new DiffSet_valueItemProvider(this);
		}

		return diffSet_valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffNumericalOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffNumericalOperatorItemProvider diffNumericalOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffNumericalOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffNumericalOperatorAdapter() {
		if (diffNumericalOperatorItemProvider == null) {
			diffNumericalOperatorItemProvider = new DiffNumericalOperatorItemProvider(this);
		}

		return diffNumericalOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffBooleanOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffBooleanOperatorItemProvider diffBooleanOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffBooleanOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffBooleanOperatorAdapter() {
		if (diffBooleanOperatorItemProvider == null) {
			diffBooleanOperatorItemProvider = new DiffBooleanOperatorItemProvider(this);
		}

		return diffBooleanOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffConstantItemProvider diffConstantItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffConstantAdapter() {
		if (diffConstantItemProvider == null) {
			diffConstantItemProvider = new DiffConstantItemProvider(this);
		}

		return diffConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffIf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffIfItemProvider diffIfItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffIf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffIfAdapter() {
		if (diffIfItemProvider == null) {
			diffIfItemProvider = new DiffIfItemProvider(this);
		}

		return diffIfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffIf_condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffIf_conditionItemProvider diffIf_conditionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffIf_condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffIf_conditionAdapter() {
		if (diffIf_conditionItemProvider == null) {
			diffIf_conditionItemProvider = new DiffIf_conditionItemProvider(this);
		}

		return diffIf_conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffFunctionItemProvider diffFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffFunctionAdapter() {
		if (diffFunctionItemProvider == null) {
			diffFunctionItemProvider = new DiffFunctionItemProvider(this);
		}

		return diffFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffFunction_paramDefs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffFunction_paramDefsItemProvider diffFunction_paramDefsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffFunction_paramDefs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffFunction_paramDefsAdapter() {
		if (diffFunction_paramDefsItemProvider == null) {
			diffFunction_paramDefsItemProvider = new DiffFunction_paramDefsItemProvider(this);
		}

		return diffFunction_paramDefsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffFunction_instructions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffFunction_instructionsItemProvider diffFunction_instructionsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffFunction_instructions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffFunction_instructionsAdapter() {
		if (diffFunction_instructionsItemProvider == null) {
			diffFunction_instructionsItemProvider = new DiffFunction_instructionsItemProvider(this);
		}

		return diffFunction_instructionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffParameterDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffParameterDefinitionItemProvider diffParameterDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffParameterDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffParameterDefinitionAdapter() {
		if (diffParameterDefinitionItemProvider == null) {
			diffParameterDefinitionItemProvider = new DiffParameterDefinitionItemProvider(this);
		}

		return diffParameterDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffParameter_to_definition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffParameter_to_definitionItemProvider diffParameter_to_definitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffParameter_to_definition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffParameter_to_definitionAdapter() {
		if (diffParameter_to_definitionItemProvider == null) {
			diffParameter_to_definitionItemProvider = new DiffParameter_to_definitionItemProvider(this);
		}

		return diffParameter_to_definitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffFunctionCallItemProvider diffFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffFunctionCallAdapter() {
		if (diffFunctionCallItemProvider == null) {
			diffFunctionCallItemProvider = new DiffFunctionCallItemProvider(this);
		}

		return diffFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffFunctionCall_definition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffFunctionCall_definitionItemProvider diffFunctionCall_definitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffFunctionCall_definition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffFunctionCall_definitionAdapter() {
		if (diffFunctionCall_definitionItemProvider == null) {
			diffFunctionCall_definitionItemProvider = new DiffFunctionCall_definitionItemProvider(this);
		}

		return diffFunctionCall_definitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffFunctionCall_parameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffFunctionCall_parametersItemProvider diffFunctionCall_parametersItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffFunctionCall_parameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffFunctionCall_parametersAdapter() {
		if (diffFunctionCall_parametersItemProvider == null) {
			diffFunctionCall_parametersItemProvider = new DiffFunctionCall_parametersItemProvider(this);
		}

		return diffFunctionCall_parametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffParameterCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffParameterCallItemProvider diffParameterCallItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffParameterCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffParameterCallAdapter() {
		if (diffParameterCallItemProvider == null) {
			diffParameterCallItemProvider = new DiffParameterCallItemProvider(this);
		}

		return diffParameterCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoDiffMM.DiffParameterCall_definition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DiffParameterCall_definitionItemProvider diffParameterCall_definitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoDiffMM.DiffParameterCall_definition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDiffParameterCall_definitionAdapter() {
		if (diffParameterCall_definitionItemProvider == null) {
			diffParameterCall_definitionItemProvider = new DiffParameterCall_definitionItemProvider(this);
		}

		return diffParameterCall_definitionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (hardwareItemProvider != null) hardwareItemProvider.dispose();
		if (platformItemProvider != null) platformItemProvider.dispose();
		if (digitalPinItemProvider != null) digitalPinItemProvider.dispose();
		if (analogPinItemProvider != null) analogPinItemProvider.dispose();
		if (sketchItemProvider != null) sketchItemProvider.dispose();
		if (projectItemProvider != null) projectItemProvider.dispose();
		if (statusItemProvider != null) statusItemProvider.dispose();
		if (levelItemProvider != null) levelItemProvider.dispose();
		if (delayItemProvider != null) delayItemProvider.dispose();
		if (inputModuleItemProvider != null) inputModuleItemProvider.dispose();
		if (outputModuleItemProvider != null) outputModuleItemProvider.dispose();
		if (connectorItemProvider != null) connectorItemProvider.dispose();
		if (repeatItemProvider != null) repeatItemProvider.dispose();
		if (sensorItemProvider != null) sensorItemProvider.dispose();
		if (whileItemProvider != null) whileItemProvider.dispose();
		if (variableItemProvider != null) variableItemProvider.dispose();
		if (setItemProvider != null) setItemProvider.dispose();
		if (numericalOperatorItemProvider != null) numericalOperatorItemProvider.dispose();
		if (booleanOperatorItemProvider != null) booleanOperatorItemProvider.dispose();
		if (constantItemProvider != null) constantItemProvider.dispose();
		if (ifItemProvider != null) ifItemProvider.dispose();
		if (functionItemProvider != null) functionItemProvider.dispose();
		if (parameterDefinitionItemProvider != null) parameterDefinitionItemProvider.dispose();
		if (functionCallItemProvider != null) functionCallItemProvider.dispose();
		if (parameterCallItemProvider != null) parameterCallItemProvider.dispose();
		if (domainSpecificDiffItemProvider != null) domainSpecificDiffItemProvider.dispose();
		if (diffHardwareItemProvider != null) diffHardwareItemProvider.dispose();
		if (diffHardware_platformsItemProvider != null) diffHardware_platformsItemProvider.dispose();
		if (diffHardware_modulesItemProvider != null) diffHardware_modulesItemProvider.dispose();
		if (diffHardware_connectorsItemProvider != null) diffHardware_connectorsItemProvider.dispose();
		if (diffPlatformItemProvider != null) diffPlatformItemProvider.dispose();
		if (diffPlatform_digitalPinsItemProvider != null) diffPlatform_digitalPinsItemProvider.dispose();
		if (diffPlatform_analogPinsItemProvider != null) diffPlatform_analogPinsItemProvider.dispose();
		if (diffDigitalPinItemProvider != null) diffDigitalPinItemProvider.dispose();
		if (diffAnalogPinItemProvider != null) diffAnalogPinItemProvider.dispose();
		if (diffSketchItemProvider != null) diffSketchItemProvider.dispose();
		if (diffSketch_hardwareItemProvider != null) diffSketch_hardwareItemProvider.dispose();
		if (diffSketch_instructionsItemProvider != null) diffSketch_instructionsItemProvider.dispose();
		if (diffSketch_functionsItemProvider != null) diffSketch_functionsItemProvider.dispose();
		if (diffProjectItemProvider != null) diffProjectItemProvider.dispose();
		if (diffProject_hardwareItemProvider != null) diffProject_hardwareItemProvider.dispose();
		if (diffProject_sketchItemProvider != null) diffProject_sketchItemProvider.dispose();
		if (diffProject_modulesItemProvider != null) diffProject_modulesItemProvider.dispose();
		if (diffProject_platformItemProvider != null) diffProject_platformItemProvider.dispose();
		if (diffProject_domainspecificdiffsItemProvider != null) diffProject_domainspecificdiffsItemProvider.dispose();
		if (diffInstruction_previousItemProvider != null) diffInstruction_previousItemProvider.dispose();
		if (diffInstruction_nextItemProvider != null) diffInstruction_nextItemProvider.dispose();
		if (diffStatusItemProvider != null) diffStatusItemProvider.dispose();
		if (diffStatus_sensorItemProvider != null) diffStatus_sensorItemProvider.dispose();
		if (diffLevelItemProvider != null) diffLevelItemProvider.dispose();
		if (diffLevel_levelItemProvider != null) diffLevel_levelItemProvider.dispose();
		if (diffModuleInstruction_moduleItemProvider != null) diffModuleInstruction_moduleItemProvider.dispose();
		if (diffControl_instructionsItemProvider != null) diffControl_instructionsItemProvider.dispose();
		if (diffDelayItemProvider != null) diffDelayItemProvider.dispose();
		if (diffInputModuleItemProvider != null) diffInputModuleItemProvider.dispose();
		if (diffOutputModuleItemProvider != null) diffOutputModuleItemProvider.dispose();
		if (diffConnectorItemProvider != null) diffConnectorItemProvider.dispose();
		if (diffConnector_pinItemProvider != null) diffConnector_pinItemProvider.dispose();
		if (diffConnector_moduleItemProvider != null) diffConnector_moduleItemProvider.dispose();
		if (diffRepeatItemProvider != null) diffRepeatItemProvider.dispose();
		if (diffSensorItemProvider != null) diffSensorItemProvider.dispose();
		if (diffSensor_statusItemProvider != null) diffSensor_statusItemProvider.dispose();
		if (diffWhileItemProvider != null) diffWhileItemProvider.dispose();
		if (diffWhile_conditionItemProvider != null) diffWhile_conditionItemProvider.dispose();
		if (diffMathOperator_leftItemProvider != null) diffMathOperator_leftItemProvider.dispose();
		if (diffMathOperator_rightItemProvider != null) diffMathOperator_rightItemProvider.dispose();
		if (diffVariableItemProvider != null) diffVariableItemProvider.dispose();
		if (diffSetItemProvider != null) diffSetItemProvider.dispose();
		if (diffSet_variableItemProvider != null) diffSet_variableItemProvider.dispose();
		if (diffSet_valueItemProvider != null) diffSet_valueItemProvider.dispose();
		if (diffNumericalOperatorItemProvider != null) diffNumericalOperatorItemProvider.dispose();
		if (diffBooleanOperatorItemProvider != null) diffBooleanOperatorItemProvider.dispose();
		if (diffConstantItemProvider != null) diffConstantItemProvider.dispose();
		if (diffIfItemProvider != null) diffIfItemProvider.dispose();
		if (diffIf_conditionItemProvider != null) diffIf_conditionItemProvider.dispose();
		if (diffFunctionItemProvider != null) diffFunctionItemProvider.dispose();
		if (diffFunction_paramDefsItemProvider != null) diffFunction_paramDefsItemProvider.dispose();
		if (diffFunction_instructionsItemProvider != null) diffFunction_instructionsItemProvider.dispose();
		if (diffParameterDefinitionItemProvider != null) diffParameterDefinitionItemProvider.dispose();
		if (diffParameter_to_definitionItemProvider != null) diffParameter_to_definitionItemProvider.dispose();
		if (diffFunctionCallItemProvider != null) diffFunctionCallItemProvider.dispose();
		if (diffFunctionCall_definitionItemProvider != null) diffFunctionCall_definitionItemProvider.dispose();
		if (diffFunctionCall_parametersItemProvider != null) diffFunctionCall_parametersItemProvider.dispose();
		if (diffParameterCallItemProvider != null) diffParameterCallItemProvider.dispose();
		if (diffParameterCall_definitionItemProvider != null) diffParameterCall_definitionItemProvider.dispose();
	}

}
