/**
 */
package PacmanGoRuleMM.provider;

import PacmanGoRuleMM.util.PacmanGoRuleMMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class PacmanGoRuleMMItemProviderAdapterFactory extends PacmanGoRuleMMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public PacmanGoRuleMMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_GridNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_GridNodeItemProvider pattern_GridNodeItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_GridNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_GridNodeAdapter() {
		if (pattern_GridNodeItemProvider == null) {
			pattern_GridNodeItemProvider = new Pattern_GridNodeItemProvider(this);
		}

		return pattern_GridNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_Food} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_FoodItemProvider pattern_FoodItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_Food}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_FoodAdapter() {
		if (pattern_FoodItemProvider == null) {
			pattern_FoodItemProvider = new Pattern_FoodItemProvider(this);
		}

		return pattern_FoodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_Pacman} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_PacmanItemProvider pattern_PacmanItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_Pacman}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_PacmanAdapter() {
		if (pattern_PacmanItemProvider == null) {
			pattern_PacmanItemProvider = new Pattern_PacmanItemProvider(this);
		}

		return pattern_PacmanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_Ghost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_GhostItemProvider pattern_GhostItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_Ghost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_GhostAdapter() {
		if (pattern_GhostItemProvider == null) {
			pattern_GhostItemProvider = new Pattern_GhostItemProvider(this);
		}

		return pattern_GhostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_Scoreboard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_ScoreboardItemProvider pattern_ScoreboardItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_Scoreboard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_ScoreboardAdapter() {
		if (pattern_ScoreboardItemProvider == null) {
			pattern_ScoreboardItemProvider = new Pattern_ScoreboardItemProvider(this);
		}

		return pattern_ScoreboardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_Game} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_GameItemProvider pattern_GameItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_Game}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_GameAdapter() {
		if (pattern_GameItemProvider == null) {
			pattern_GameItemProvider = new Pattern_GameItemProvider(this);
		}

		return pattern_GameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DomainSpecificDiff} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DomainSpecificDiffItemProvider pattern_DomainSpecificDiffItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DomainSpecificDiff}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DomainSpecificDiffAdapter() {
		if (pattern_DomainSpecificDiffItemProvider == null) {
			pattern_DomainSpecificDiffItemProvider = new Pattern_DomainSpecificDiffItemProvider(this);
		}

		return pattern_DomainSpecificDiffItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGridNode} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGridNodeItemProvider pattern_DiffGridNodeItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGridNode}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGridNodeAdapter() {
		if (pattern_DiffGridNodeItemProvider == null) {
			pattern_DiffGridNodeItemProvider = new Pattern_DiffGridNodeItemProvider(this);
		}

		return pattern_DiffGridNodeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGridNode_up} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGridNode_upItemProvider pattern_DiffGridNode_upItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGridNode_up}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGridNode_upAdapter() {
		if (pattern_DiffGridNode_upItemProvider == null) {
			pattern_DiffGridNode_upItemProvider = new Pattern_DiffGridNode_upItemProvider(this);
		}

		return pattern_DiffGridNode_upItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGridNode_bottom} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGridNode_bottomItemProvider pattern_DiffGridNode_bottomItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGridNode_bottom}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGridNode_bottomAdapter() {
		if (pattern_DiffGridNode_bottomItemProvider == null) {
			pattern_DiffGridNode_bottomItemProvider = new Pattern_DiffGridNode_bottomItemProvider(this);
		}

		return pattern_DiffGridNode_bottomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGridNode_left} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGridNode_leftItemProvider pattern_DiffGridNode_leftItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGridNode_left}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGridNode_leftAdapter() {
		if (pattern_DiffGridNode_leftItemProvider == null) {
			pattern_DiffGridNode_leftItemProvider = new Pattern_DiffGridNode_leftItemProvider(this);
		}

		return pattern_DiffGridNode_leftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGridNode_right} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGridNode_rightItemProvider pattern_DiffGridNode_rightItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGridNode_right}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGridNode_rightAdapter() {
		if (pattern_DiffGridNode_rightItemProvider == null) {
			pattern_DiffGridNode_rightItemProvider = new Pattern_DiffGridNode_rightItemProvider(this);
		}

		return pattern_DiffGridNode_rightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffFood} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffFoodItemProvider pattern_DiffFoodItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffFood}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffFoodAdapter() {
		if (pattern_DiffFoodItemProvider == null) {
			pattern_DiffFoodItemProvider = new Pattern_DiffFoodItemProvider(this);
		}

		return pattern_DiffFoodItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffPacman} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffPacmanItemProvider pattern_DiffPacmanItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffPacman}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffPacmanAdapter() {
		if (pattern_DiffPacmanItemProvider == null) {
			pattern_DiffPacmanItemProvider = new Pattern_DiffPacmanItemProvider(this);
		}

		return pattern_DiffPacmanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGhost} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGhostItemProvider pattern_DiffGhostItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGhost}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGhostAdapter() {
		if (pattern_DiffGhostItemProvider == null) {
			pattern_DiffGhostItemProvider = new Pattern_DiffGhostItemProvider(this);
		}

		return pattern_DiffGhostItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffScoreboard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffScoreboardItemProvider pattern_DiffScoreboardItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffScoreboard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffScoreboardAdapter() {
		if (pattern_DiffScoreboardItemProvider == null) {
			pattern_DiffScoreboardItemProvider = new Pattern_DiffScoreboardItemProvider(this);
		}

		return pattern_DiffScoreboardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGame} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGameItemProvider pattern_DiffGameItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGame}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGameAdapter() {
		if (pattern_DiffGameItemProvider == null) {
			pattern_DiffGameItemProvider = new Pattern_DiffGameItemProvider(this);
		}

		return pattern_DiffGameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGame_gridnodes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGame_gridnodesItemProvider pattern_DiffGame_gridnodesItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGame_gridnodes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGame_gridnodesAdapter() {
		if (pattern_DiffGame_gridnodesItemProvider == null) {
			pattern_DiffGame_gridnodesItemProvider = new Pattern_DiffGame_gridnodesItemProvider(this);
		}

		return pattern_DiffGame_gridnodesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGame_scoreboard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGame_scoreboardItemProvider pattern_DiffGame_scoreboardItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGame_scoreboard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGame_scoreboardAdapter() {
		if (pattern_DiffGame_scoreboardItemProvider == null) {
			pattern_DiffGame_scoreboardItemProvider = new Pattern_DiffGame_scoreboardItemProvider(this);
		}

		return pattern_DiffGame_scoreboardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGame_entities} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGame_entitiesItemProvider pattern_DiffGame_entitiesItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGame_entities}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGame_entitiesAdapter() {
		if (pattern_DiffGame_entitiesItemProvider == null) {
			pattern_DiffGame_entitiesItemProvider = new Pattern_DiffGame_entitiesItemProvider(this);
		}

		return pattern_DiffGame_entitiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffGame_domainspecificdiffs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffGame_domainspecificdiffsItemProvider pattern_DiffGame_domainspecificdiffsItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffGame_domainspecificdiffs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffGame_domainspecificdiffsAdapter() {
		if (pattern_DiffGame_domainspecificdiffsItemProvider == null) {
			pattern_DiffGame_domainspecificdiffsItemProvider = new Pattern_DiffGame_domainspecificdiffsItemProvider(this);
		}

		return pattern_DiffGame_domainspecificdiffsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Pattern_DiffPositionableEntity_on} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffPositionableEntity_onItemProvider pattern_DiffPositionableEntity_onItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Pattern_DiffPositionableEntity_on}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffPositionableEntity_onAdapter() {
		if (pattern_DiffPositionableEntity_onItemProvider == null) {
			pattern_DiffPositionableEntity_onItemProvider = new Pattern_DiffPositionableEntity_onItemProvider(this);
		}

		return pattern_DiffPositionableEntity_onItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link PacmanGoRuleMM.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link PacmanGoRuleMM.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pattern_GridNodeItemProvider != null) pattern_GridNodeItemProvider.dispose();
		if (pattern_FoodItemProvider != null) pattern_FoodItemProvider.dispose();
		if (pattern_PacmanItemProvider != null) pattern_PacmanItemProvider.dispose();
		if (pattern_GhostItemProvider != null) pattern_GhostItemProvider.dispose();
		if (pattern_ScoreboardItemProvider != null) pattern_ScoreboardItemProvider.dispose();
		if (pattern_GameItemProvider != null) pattern_GameItemProvider.dispose();
		if (pattern_DomainSpecificDiffItemProvider != null) pattern_DomainSpecificDiffItemProvider.dispose();
		if (pattern_DiffGridNodeItemProvider != null) pattern_DiffGridNodeItemProvider.dispose();
		if (pattern_DiffGridNode_upItemProvider != null) pattern_DiffGridNode_upItemProvider.dispose();
		if (pattern_DiffGridNode_bottomItemProvider != null) pattern_DiffGridNode_bottomItemProvider.dispose();
		if (pattern_DiffGridNode_leftItemProvider != null) pattern_DiffGridNode_leftItemProvider.dispose();
		if (pattern_DiffGridNode_rightItemProvider != null) pattern_DiffGridNode_rightItemProvider.dispose();
		if (pattern_DiffFoodItemProvider != null) pattern_DiffFoodItemProvider.dispose();
		if (pattern_DiffPacmanItemProvider != null) pattern_DiffPacmanItemProvider.dispose();
		if (pattern_DiffGhostItemProvider != null) pattern_DiffGhostItemProvider.dispose();
		if (pattern_DiffScoreboardItemProvider != null) pattern_DiffScoreboardItemProvider.dispose();
		if (pattern_DiffGameItemProvider != null) pattern_DiffGameItemProvider.dispose();
		if (pattern_DiffGame_gridnodesItemProvider != null) pattern_DiffGame_gridnodesItemProvider.dispose();
		if (pattern_DiffGame_scoreboardItemProvider != null) pattern_DiffGame_scoreboardItemProvider.dispose();
		if (pattern_DiffGame_entitiesItemProvider != null) pattern_DiffGame_entitiesItemProvider.dispose();
		if (pattern_DiffGame_domainspecificdiffsItemProvider != null) pattern_DiffGame_domainspecificdiffsItemProvider.dispose();
		if (pattern_DiffPositionableEntity_onItemProvider != null) pattern_DiffPositionableEntity_onItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
	}

}
