/**
 */
package arduinoRuleMM.provider;

import arduinoRuleMM.util.ArduinoRuleMMAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ArduinoRuleMMItemProviderAdapterFactory extends ArduinoRuleMMAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ArduinoRuleMMItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Hardware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_HardwareItemProvider pattern_HardwareItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Hardware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_HardwareAdapter() {
		if (pattern_HardwareItemProvider == null) {
			pattern_HardwareItemProvider = new Pattern_HardwareItemProvider(this);
		}

		return pattern_HardwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Platform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_PlatformItemProvider pattern_PlatformItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Platform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_PlatformAdapter() {
		if (pattern_PlatformItemProvider == null) {
			pattern_PlatformItemProvider = new Pattern_PlatformItemProvider(this);
		}

		return pattern_PlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DigitalPin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DigitalPinItemProvider pattern_DigitalPinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DigitalPin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DigitalPinAdapter() {
		if (pattern_DigitalPinItemProvider == null) {
			pattern_DigitalPinItemProvider = new Pattern_DigitalPinItemProvider(this);
		}

		return pattern_DigitalPinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_AnalogPin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_AnalogPinItemProvider pattern_AnalogPinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_AnalogPin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_AnalogPinAdapter() {
		if (pattern_AnalogPinItemProvider == null) {
			pattern_AnalogPinItemProvider = new Pattern_AnalogPinItemProvider(this);
		}

		return pattern_AnalogPinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Sketch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_SketchItemProvider pattern_SketchItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Sketch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_SketchAdapter() {
		if (pattern_SketchItemProvider == null) {
			pattern_SketchItemProvider = new Pattern_SketchItemProvider(this);
		}

		return pattern_SketchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Project} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_ProjectItemProvider pattern_ProjectItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Project}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_ProjectAdapter() {
		if (pattern_ProjectItemProvider == null) {
			pattern_ProjectItemProvider = new Pattern_ProjectItemProvider(this);
		}

		return pattern_ProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Status} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_StatusItemProvider pattern_StatusItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Status}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_StatusAdapter() {
		if (pattern_StatusItemProvider == null) {
			pattern_StatusItemProvider = new Pattern_StatusItemProvider(this);
		}

		return pattern_StatusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Level} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_LevelItemProvider pattern_LevelItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Level}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_LevelAdapter() {
		if (pattern_LevelItemProvider == null) {
			pattern_LevelItemProvider = new Pattern_LevelItemProvider(this);
		}

		return pattern_LevelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Delay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DelayItemProvider pattern_DelayItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Delay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DelayAdapter() {
		if (pattern_DelayItemProvider == null) {
			pattern_DelayItemProvider = new Pattern_DelayItemProvider(this);
		}

		return pattern_DelayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_InputModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_InputModuleItemProvider pattern_InputModuleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_InputModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_InputModuleAdapter() {
		if (pattern_InputModuleItemProvider == null) {
			pattern_InputModuleItemProvider = new Pattern_InputModuleItemProvider(this);
		}

		return pattern_InputModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_OutputModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_OutputModuleItemProvider pattern_OutputModuleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_OutputModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_OutputModuleAdapter() {
		if (pattern_OutputModuleItemProvider == null) {
			pattern_OutputModuleItemProvider = new Pattern_OutputModuleItemProvider(this);
		}

		return pattern_OutputModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Connector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_ConnectorItemProvider pattern_ConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Connector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_ConnectorAdapter() {
		if (pattern_ConnectorItemProvider == null) {
			pattern_ConnectorItemProvider = new Pattern_ConnectorItemProvider(this);
		}

		return pattern_ConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Repeat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_RepeatItemProvider pattern_RepeatItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Repeat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_RepeatAdapter() {
		if (pattern_RepeatItemProvider == null) {
			pattern_RepeatItemProvider = new Pattern_RepeatItemProvider(this);
		}

		return pattern_RepeatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_SensorItemProvider pattern_SensorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_SensorAdapter() {
		if (pattern_SensorItemProvider == null) {
			pattern_SensorItemProvider = new Pattern_SensorItemProvider(this);
		}

		return pattern_SensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_While} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_WhileItemProvider pattern_WhileItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_While}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_WhileAdapter() {
		if (pattern_WhileItemProvider == null) {
			pattern_WhileItemProvider = new Pattern_WhileItemProvider(this);
		}

		return pattern_WhileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_VariableItemProvider pattern_VariableItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_VariableAdapter() {
		if (pattern_VariableItemProvider == null) {
			pattern_VariableItemProvider = new Pattern_VariableItemProvider(this);
		}

		return pattern_VariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Set} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_SetItemProvider pattern_SetItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Set}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_SetAdapter() {
		if (pattern_SetItemProvider == null) {
			pattern_SetItemProvider = new Pattern_SetItemProvider(this);
		}

		return pattern_SetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_NumericalOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_NumericalOperatorItemProvider pattern_NumericalOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_NumericalOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_NumericalOperatorAdapter() {
		if (pattern_NumericalOperatorItemProvider == null) {
			pattern_NumericalOperatorItemProvider = new Pattern_NumericalOperatorItemProvider(this);
		}

		return pattern_NumericalOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_BooleanOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_BooleanOperatorItemProvider pattern_BooleanOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_BooleanOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_BooleanOperatorAdapter() {
		if (pattern_BooleanOperatorItemProvider == null) {
			pattern_BooleanOperatorItemProvider = new Pattern_BooleanOperatorItemProvider(this);
		}

		return pattern_BooleanOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Constant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_ConstantItemProvider pattern_ConstantItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Constant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_ConstantAdapter() {
		if (pattern_ConstantItemProvider == null) {
			pattern_ConstantItemProvider = new Pattern_ConstantItemProvider(this);
		}

		return pattern_ConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_If} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_IfItemProvider pattern_IfItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_If}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_IfAdapter() {
		if (pattern_IfItemProvider == null) {
			pattern_IfItemProvider = new Pattern_IfItemProvider(this);
		}

		return pattern_IfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_Function} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_FunctionItemProvider pattern_FunctionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_Function}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_FunctionAdapter() {
		if (pattern_FunctionItemProvider == null) {
			pattern_FunctionItemProvider = new Pattern_FunctionItemProvider(this);
		}

		return pattern_FunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_ParameterDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_ParameterDefinitionItemProvider pattern_ParameterDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_ParameterDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_ParameterDefinitionAdapter() {
		if (pattern_ParameterDefinitionItemProvider == null) {
			pattern_ParameterDefinitionItemProvider = new Pattern_ParameterDefinitionItemProvider(this);
		}

		return pattern_ParameterDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_FunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_FunctionCallItemProvider pattern_FunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_FunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_FunctionCallAdapter() {
		if (pattern_FunctionCallItemProvider == null) {
			pattern_FunctionCallItemProvider = new Pattern_FunctionCallItemProvider(this);
		}

		return pattern_FunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_ParameterCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_ParameterCallItemProvider pattern_ParameterCallItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_ParameterCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_ParameterCallAdapter() {
		if (pattern_ParameterCallItemProvider == null) {
			pattern_ParameterCallItemProvider = new Pattern_ParameterCallItemProvider(this);
		}

		return pattern_ParameterCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DomainSpecificDiff} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DomainSpecificDiffItemProvider pattern_DomainSpecificDiffItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DomainSpecificDiff}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DomainSpecificDiffAdapter() {
		if (pattern_DomainSpecificDiffItemProvider == null) {
			pattern_DomainSpecificDiffItemProvider = new Pattern_DomainSpecificDiffItemProvider(this);
		}

		return pattern_DomainSpecificDiffItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffHardware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffHardwareItemProvider pattern_DiffHardwareItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffHardware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffHardwareAdapter() {
		if (pattern_DiffHardwareItemProvider == null) {
			pattern_DiffHardwareItemProvider = new Pattern_DiffHardwareItemProvider(this);
		}

		return pattern_DiffHardwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffHardware_platforms} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffHardware_platformsItemProvider pattern_DiffHardware_platformsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffHardware_platforms}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffHardware_platformsAdapter() {
		if (pattern_DiffHardware_platformsItemProvider == null) {
			pattern_DiffHardware_platformsItemProvider = new Pattern_DiffHardware_platformsItemProvider(this);
		}

		return pattern_DiffHardware_platformsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffHardware_modules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffHardware_modulesItemProvider pattern_DiffHardware_modulesItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffHardware_modules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffHardware_modulesAdapter() {
		if (pattern_DiffHardware_modulesItemProvider == null) {
			pattern_DiffHardware_modulesItemProvider = new Pattern_DiffHardware_modulesItemProvider(this);
		}

		return pattern_DiffHardware_modulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffHardware_connectors} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffHardware_connectorsItemProvider pattern_DiffHardware_connectorsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffHardware_connectors}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffHardware_connectorsAdapter() {
		if (pattern_DiffHardware_connectorsItemProvider == null) {
			pattern_DiffHardware_connectorsItemProvider = new Pattern_DiffHardware_connectorsItemProvider(this);
		}

		return pattern_DiffHardware_connectorsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffPlatform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffPlatformItemProvider pattern_DiffPlatformItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffPlatform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffPlatformAdapter() {
		if (pattern_DiffPlatformItemProvider == null) {
			pattern_DiffPlatformItemProvider = new Pattern_DiffPlatformItemProvider(this);
		}

		return pattern_DiffPlatformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffPlatform_digitalPins} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffPlatform_digitalPinsItemProvider pattern_DiffPlatform_digitalPinsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffPlatform_digitalPins}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffPlatform_digitalPinsAdapter() {
		if (pattern_DiffPlatform_digitalPinsItemProvider == null) {
			pattern_DiffPlatform_digitalPinsItemProvider = new Pattern_DiffPlatform_digitalPinsItemProvider(this);
		}

		return pattern_DiffPlatform_digitalPinsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffPlatform_analogPins} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffPlatform_analogPinsItemProvider pattern_DiffPlatform_analogPinsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffPlatform_analogPins}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffPlatform_analogPinsAdapter() {
		if (pattern_DiffPlatform_analogPinsItemProvider == null) {
			pattern_DiffPlatform_analogPinsItemProvider = new Pattern_DiffPlatform_analogPinsItemProvider(this);
		}

		return pattern_DiffPlatform_analogPinsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffDigitalPin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffDigitalPinItemProvider pattern_DiffDigitalPinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffDigitalPin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffDigitalPinAdapter() {
		if (pattern_DiffDigitalPinItemProvider == null) {
			pattern_DiffDigitalPinItemProvider = new Pattern_DiffDigitalPinItemProvider(this);
		}

		return pattern_DiffDigitalPinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffAnalogPin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffAnalogPinItemProvider pattern_DiffAnalogPinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffAnalogPin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffAnalogPinAdapter() {
		if (pattern_DiffAnalogPinItemProvider == null) {
			pattern_DiffAnalogPinItemProvider = new Pattern_DiffAnalogPinItemProvider(this);
		}

		return pattern_DiffAnalogPinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffSketch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffSketchItemProvider pattern_DiffSketchItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffSketch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffSketchAdapter() {
		if (pattern_DiffSketchItemProvider == null) {
			pattern_DiffSketchItemProvider = new Pattern_DiffSketchItemProvider(this);
		}

		return pattern_DiffSketchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffSketch_hardware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffSketch_hardwareItemProvider pattern_DiffSketch_hardwareItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffSketch_hardware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffSketch_hardwareAdapter() {
		if (pattern_DiffSketch_hardwareItemProvider == null) {
			pattern_DiffSketch_hardwareItemProvider = new Pattern_DiffSketch_hardwareItemProvider(this);
		}

		return pattern_DiffSketch_hardwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffSketch_instructions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffSketch_instructionsItemProvider pattern_DiffSketch_instructionsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffSketch_instructions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffSketch_instructionsAdapter() {
		if (pattern_DiffSketch_instructionsItemProvider == null) {
			pattern_DiffSketch_instructionsItemProvider = new Pattern_DiffSketch_instructionsItemProvider(this);
		}

		return pattern_DiffSketch_instructionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffSketch_functions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffSketch_functionsItemProvider pattern_DiffSketch_functionsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffSketch_functions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffSketch_functionsAdapter() {
		if (pattern_DiffSketch_functionsItemProvider == null) {
			pattern_DiffSketch_functionsItemProvider = new Pattern_DiffSketch_functionsItemProvider(this);
		}

		return pattern_DiffSketch_functionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffProject} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffProjectItemProvider pattern_DiffProjectItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffProject}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffProjectAdapter() {
		if (pattern_DiffProjectItemProvider == null) {
			pattern_DiffProjectItemProvider = new Pattern_DiffProjectItemProvider(this);
		}

		return pattern_DiffProjectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffProject_hardware} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffProject_hardwareItemProvider pattern_DiffProject_hardwareItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffProject_hardware}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffProject_hardwareAdapter() {
		if (pattern_DiffProject_hardwareItemProvider == null) {
			pattern_DiffProject_hardwareItemProvider = new Pattern_DiffProject_hardwareItemProvider(this);
		}

		return pattern_DiffProject_hardwareItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffProject_sketch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffProject_sketchItemProvider pattern_DiffProject_sketchItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffProject_sketch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffProject_sketchAdapter() {
		if (pattern_DiffProject_sketchItemProvider == null) {
			pattern_DiffProject_sketchItemProvider = new Pattern_DiffProject_sketchItemProvider(this);
		}

		return pattern_DiffProject_sketchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffProject_modules} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffProject_modulesItemProvider pattern_DiffProject_modulesItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffProject_modules}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffProject_modulesAdapter() {
		if (pattern_DiffProject_modulesItemProvider == null) {
			pattern_DiffProject_modulesItemProvider = new Pattern_DiffProject_modulesItemProvider(this);
		}

		return pattern_DiffProject_modulesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffProject_platform} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffProject_platformItemProvider pattern_DiffProject_platformItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffProject_platform}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffProject_platformAdapter() {
		if (pattern_DiffProject_platformItemProvider == null) {
			pattern_DiffProject_platformItemProvider = new Pattern_DiffProject_platformItemProvider(this);
		}

		return pattern_DiffProject_platformItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffProject_domainspecificdiffs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffProject_domainspecificdiffsItemProvider pattern_DiffProject_domainspecificdiffsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffProject_domainspecificdiffs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffProject_domainspecificdiffsAdapter() {
		if (pattern_DiffProject_domainspecificdiffsItemProvider == null) {
			pattern_DiffProject_domainspecificdiffsItemProvider = new Pattern_DiffProject_domainspecificdiffsItemProvider(this);
		}

		return pattern_DiffProject_domainspecificdiffsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffInstruction_previous} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffInstruction_previousItemProvider pattern_DiffInstruction_previousItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffInstruction_previous}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffInstruction_previousAdapter() {
		if (pattern_DiffInstruction_previousItemProvider == null) {
			pattern_DiffInstruction_previousItemProvider = new Pattern_DiffInstruction_previousItemProvider(this);
		}

		return pattern_DiffInstruction_previousItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffInstruction_next} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffInstruction_nextItemProvider pattern_DiffInstruction_nextItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffInstruction_next}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffInstruction_nextAdapter() {
		if (pattern_DiffInstruction_nextItemProvider == null) {
			pattern_DiffInstruction_nextItemProvider = new Pattern_DiffInstruction_nextItemProvider(this);
		}

		return pattern_DiffInstruction_nextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffStatus} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffStatusItemProvider pattern_DiffStatusItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffStatus}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffStatusAdapter() {
		if (pattern_DiffStatusItemProvider == null) {
			pattern_DiffStatusItemProvider = new Pattern_DiffStatusItemProvider(this);
		}

		return pattern_DiffStatusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffStatus_sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffStatus_sensorItemProvider pattern_DiffStatus_sensorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffStatus_sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffStatus_sensorAdapter() {
		if (pattern_DiffStatus_sensorItemProvider == null) {
			pattern_DiffStatus_sensorItemProvider = new Pattern_DiffStatus_sensorItemProvider(this);
		}

		return pattern_DiffStatus_sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffLevel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffLevelItemProvider pattern_DiffLevelItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffLevel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffLevelAdapter() {
		if (pattern_DiffLevelItemProvider == null) {
			pattern_DiffLevelItemProvider = new Pattern_DiffLevelItemProvider(this);
		}

		return pattern_DiffLevelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffLevel_level} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffLevel_levelItemProvider pattern_DiffLevel_levelItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffLevel_level}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffLevel_levelAdapter() {
		if (pattern_DiffLevel_levelItemProvider == null) {
			pattern_DiffLevel_levelItemProvider = new Pattern_DiffLevel_levelItemProvider(this);
		}

		return pattern_DiffLevel_levelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffModuleInstruction_module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffModuleInstruction_moduleItemProvider pattern_DiffModuleInstruction_moduleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffModuleInstruction_module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffModuleInstruction_moduleAdapter() {
		if (pattern_DiffModuleInstruction_moduleItemProvider == null) {
			pattern_DiffModuleInstruction_moduleItemProvider = new Pattern_DiffModuleInstruction_moduleItemProvider(this);
		}

		return pattern_DiffModuleInstruction_moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffControl_instructions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffControl_instructionsItemProvider pattern_DiffControl_instructionsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffControl_instructions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffControl_instructionsAdapter() {
		if (pattern_DiffControl_instructionsItemProvider == null) {
			pattern_DiffControl_instructionsItemProvider = new Pattern_DiffControl_instructionsItemProvider(this);
		}

		return pattern_DiffControl_instructionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffDelay} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffDelayItemProvider pattern_DiffDelayItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffDelay}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffDelayAdapter() {
		if (pattern_DiffDelayItemProvider == null) {
			pattern_DiffDelayItemProvider = new Pattern_DiffDelayItemProvider(this);
		}

		return pattern_DiffDelayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffInputModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffInputModuleItemProvider pattern_DiffInputModuleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffInputModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffInputModuleAdapter() {
		if (pattern_DiffInputModuleItemProvider == null) {
			pattern_DiffInputModuleItemProvider = new Pattern_DiffInputModuleItemProvider(this);
		}

		return pattern_DiffInputModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffOutputModule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffOutputModuleItemProvider pattern_DiffOutputModuleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffOutputModule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffOutputModuleAdapter() {
		if (pattern_DiffOutputModuleItemProvider == null) {
			pattern_DiffOutputModuleItemProvider = new Pattern_DiffOutputModuleItemProvider(this);
		}

		return pattern_DiffOutputModuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffConnector} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffConnectorItemProvider pattern_DiffConnectorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffConnector}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffConnectorAdapter() {
		if (pattern_DiffConnectorItemProvider == null) {
			pattern_DiffConnectorItemProvider = new Pattern_DiffConnectorItemProvider(this);
		}

		return pattern_DiffConnectorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffConnector_pin} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffConnector_pinItemProvider pattern_DiffConnector_pinItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffConnector_pin}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffConnector_pinAdapter() {
		if (pattern_DiffConnector_pinItemProvider == null) {
			pattern_DiffConnector_pinItemProvider = new Pattern_DiffConnector_pinItemProvider(this);
		}

		return pattern_DiffConnector_pinItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffConnector_module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffConnector_moduleItemProvider pattern_DiffConnector_moduleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffConnector_module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffConnector_moduleAdapter() {
		if (pattern_DiffConnector_moduleItemProvider == null) {
			pattern_DiffConnector_moduleItemProvider = new Pattern_DiffConnector_moduleItemProvider(this);
		}

		return pattern_DiffConnector_moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffRepeat} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffRepeatItemProvider pattern_DiffRepeatItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffRepeat}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffRepeatAdapter() {
		if (pattern_DiffRepeatItemProvider == null) {
			pattern_DiffRepeatItemProvider = new Pattern_DiffRepeatItemProvider(this);
		}

		return pattern_DiffRepeatItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffSensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffSensorItemProvider pattern_DiffSensorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffSensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffSensorAdapter() {
		if (pattern_DiffSensorItemProvider == null) {
			pattern_DiffSensorItemProvider = new Pattern_DiffSensorItemProvider(this);
		}

		return pattern_DiffSensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffSensor_status} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffSensor_statusItemProvider pattern_DiffSensor_statusItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffSensor_status}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffSensor_statusAdapter() {
		if (pattern_DiffSensor_statusItemProvider == null) {
			pattern_DiffSensor_statusItemProvider = new Pattern_DiffSensor_statusItemProvider(this);
		}

		return pattern_DiffSensor_statusItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffWhile} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffWhileItemProvider pattern_DiffWhileItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffWhile}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffWhileAdapter() {
		if (pattern_DiffWhileItemProvider == null) {
			pattern_DiffWhileItemProvider = new Pattern_DiffWhileItemProvider(this);
		}

		return pattern_DiffWhileItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffWhile_condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffWhile_conditionItemProvider pattern_DiffWhile_conditionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffWhile_condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffWhile_conditionAdapter() {
		if (pattern_DiffWhile_conditionItemProvider == null) {
			pattern_DiffWhile_conditionItemProvider = new Pattern_DiffWhile_conditionItemProvider(this);
		}

		return pattern_DiffWhile_conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffMathOperator_left} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffMathOperator_leftItemProvider pattern_DiffMathOperator_leftItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffMathOperator_left}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffMathOperator_leftAdapter() {
		if (pattern_DiffMathOperator_leftItemProvider == null) {
			pattern_DiffMathOperator_leftItemProvider = new Pattern_DiffMathOperator_leftItemProvider(this);
		}

		return pattern_DiffMathOperator_leftItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffMathOperator_right} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffMathOperator_rightItemProvider pattern_DiffMathOperator_rightItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffMathOperator_right}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffMathOperator_rightAdapter() {
		if (pattern_DiffMathOperator_rightItemProvider == null) {
			pattern_DiffMathOperator_rightItemProvider = new Pattern_DiffMathOperator_rightItemProvider(this);
		}

		return pattern_DiffMathOperator_rightItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffVariable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffVariableItemProvider pattern_DiffVariableItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffVariable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffVariableAdapter() {
		if (pattern_DiffVariableItemProvider == null) {
			pattern_DiffVariableItemProvider = new Pattern_DiffVariableItemProvider(this);
		}

		return pattern_DiffVariableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffSetItemProvider pattern_DiffSetItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffSetAdapter() {
		if (pattern_DiffSetItemProvider == null) {
			pattern_DiffSetItemProvider = new Pattern_DiffSetItemProvider(this);
		}

		return pattern_DiffSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffSet_variable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffSet_variableItemProvider pattern_DiffSet_variableItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffSet_variable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffSet_variableAdapter() {
		if (pattern_DiffSet_variableItemProvider == null) {
			pattern_DiffSet_variableItemProvider = new Pattern_DiffSet_variableItemProvider(this);
		}

		return pattern_DiffSet_variableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffSet_value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffSet_valueItemProvider pattern_DiffSet_valueItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffSet_value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffSet_valueAdapter() {
		if (pattern_DiffSet_valueItemProvider == null) {
			pattern_DiffSet_valueItemProvider = new Pattern_DiffSet_valueItemProvider(this);
		}

		return pattern_DiffSet_valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffNumericalOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffNumericalOperatorItemProvider pattern_DiffNumericalOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffNumericalOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffNumericalOperatorAdapter() {
		if (pattern_DiffNumericalOperatorItemProvider == null) {
			pattern_DiffNumericalOperatorItemProvider = new Pattern_DiffNumericalOperatorItemProvider(this);
		}

		return pattern_DiffNumericalOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffBooleanOperator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffBooleanOperatorItemProvider pattern_DiffBooleanOperatorItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffBooleanOperator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffBooleanOperatorAdapter() {
		if (pattern_DiffBooleanOperatorItemProvider == null) {
			pattern_DiffBooleanOperatorItemProvider = new Pattern_DiffBooleanOperatorItemProvider(this);
		}

		return pattern_DiffBooleanOperatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffConstant} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffConstantItemProvider pattern_DiffConstantItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffConstant}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffConstantAdapter() {
		if (pattern_DiffConstantItemProvider == null) {
			pattern_DiffConstantItemProvider = new Pattern_DiffConstantItemProvider(this);
		}

		return pattern_DiffConstantItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffIf} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffIfItemProvider pattern_DiffIfItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffIf}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffIfAdapter() {
		if (pattern_DiffIfItemProvider == null) {
			pattern_DiffIfItemProvider = new Pattern_DiffIfItemProvider(this);
		}

		return pattern_DiffIfItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffIf_condition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffIf_conditionItemProvider pattern_DiffIf_conditionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffIf_condition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffIf_conditionAdapter() {
		if (pattern_DiffIf_conditionItemProvider == null) {
			pattern_DiffIf_conditionItemProvider = new Pattern_DiffIf_conditionItemProvider(this);
		}

		return pattern_DiffIf_conditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffFunctionItemProvider pattern_DiffFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffFunctionAdapter() {
		if (pattern_DiffFunctionItemProvider == null) {
			pattern_DiffFunctionItemProvider = new Pattern_DiffFunctionItemProvider(this);
		}

		return pattern_DiffFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffFunction_paramDefs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffFunction_paramDefsItemProvider pattern_DiffFunction_paramDefsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffFunction_paramDefs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffFunction_paramDefsAdapter() {
		if (pattern_DiffFunction_paramDefsItemProvider == null) {
			pattern_DiffFunction_paramDefsItemProvider = new Pattern_DiffFunction_paramDefsItemProvider(this);
		}

		return pattern_DiffFunction_paramDefsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffFunction_instructions} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffFunction_instructionsItemProvider pattern_DiffFunction_instructionsItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffFunction_instructions}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffFunction_instructionsAdapter() {
		if (pattern_DiffFunction_instructionsItemProvider == null) {
			pattern_DiffFunction_instructionsItemProvider = new Pattern_DiffFunction_instructionsItemProvider(this);
		}

		return pattern_DiffFunction_instructionsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffParameterDefinition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffParameterDefinitionItemProvider pattern_DiffParameterDefinitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffParameterDefinition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffParameterDefinitionAdapter() {
		if (pattern_DiffParameterDefinitionItemProvider == null) {
			pattern_DiffParameterDefinitionItemProvider = new Pattern_DiffParameterDefinitionItemProvider(this);
		}

		return pattern_DiffParameterDefinitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffParameter_to_definition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffParameter_to_definitionItemProvider pattern_DiffParameter_to_definitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffParameter_to_definition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffParameter_to_definitionAdapter() {
		if (pattern_DiffParameter_to_definitionItemProvider == null) {
			pattern_DiffParameter_to_definitionItemProvider = new Pattern_DiffParameter_to_definitionItemProvider(this);
		}

		return pattern_DiffParameter_to_definitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffFunctionCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffFunctionCallItemProvider pattern_DiffFunctionCallItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffFunctionCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffFunctionCallAdapter() {
		if (pattern_DiffFunctionCallItemProvider == null) {
			pattern_DiffFunctionCallItemProvider = new Pattern_DiffFunctionCallItemProvider(this);
		}

		return pattern_DiffFunctionCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffFunctionCall_definition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffFunctionCall_definitionItemProvider pattern_DiffFunctionCall_definitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffFunctionCall_definition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffFunctionCall_definitionAdapter() {
		if (pattern_DiffFunctionCall_definitionItemProvider == null) {
			pattern_DiffFunctionCall_definitionItemProvider = new Pattern_DiffFunctionCall_definitionItemProvider(this);
		}

		return pattern_DiffFunctionCall_definitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffFunctionCall_parameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffFunctionCall_parametersItemProvider pattern_DiffFunctionCall_parametersItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffFunctionCall_parameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffFunctionCall_parametersAdapter() {
		if (pattern_DiffFunctionCall_parametersItemProvider == null) {
			pattern_DiffFunctionCall_parametersItemProvider = new Pattern_DiffFunctionCall_parametersItemProvider(this);
		}

		return pattern_DiffFunctionCall_parametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffParameterCall} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffParameterCallItemProvider pattern_DiffParameterCallItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffParameterCall}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffParameterCallAdapter() {
		if (pattern_DiffParameterCallItemProvider == null) {
			pattern_DiffParameterCallItemProvider = new Pattern_DiffParameterCallItemProvider(this);
		}

		return pattern_DiffParameterCallItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Pattern_DiffParameterCall_definition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Pattern_DiffParameterCall_definitionItemProvider pattern_DiffParameterCall_definitionItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Pattern_DiffParameterCall_definition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPattern_DiffParameterCall_definitionAdapter() {
		if (pattern_DiffParameterCall_definitionItemProvider == null) {
			pattern_DiffParameterCall_definitionItemProvider = new Pattern_DiffParameterCall_definitionItemProvider(this);
		}

		return pattern_DiffParameterCall_definitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link arduinoRuleMM.Rule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RuleItemProvider ruleItemProvider;

	/**
	 * This creates an adapter for a {@link arduinoRuleMM.Rule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRuleAdapter() {
		if (ruleItemProvider == null) {
			ruleItemProvider = new RuleItemProvider(this);
		}

		return ruleItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (pattern_HardwareItemProvider != null) pattern_HardwareItemProvider.dispose();
		if (pattern_PlatformItemProvider != null) pattern_PlatformItemProvider.dispose();
		if (pattern_DigitalPinItemProvider != null) pattern_DigitalPinItemProvider.dispose();
		if (pattern_AnalogPinItemProvider != null) pattern_AnalogPinItemProvider.dispose();
		if (pattern_SketchItemProvider != null) pattern_SketchItemProvider.dispose();
		if (pattern_ProjectItemProvider != null) pattern_ProjectItemProvider.dispose();
		if (pattern_StatusItemProvider != null) pattern_StatusItemProvider.dispose();
		if (pattern_LevelItemProvider != null) pattern_LevelItemProvider.dispose();
		if (pattern_DelayItemProvider != null) pattern_DelayItemProvider.dispose();
		if (pattern_InputModuleItemProvider != null) pattern_InputModuleItemProvider.dispose();
		if (pattern_OutputModuleItemProvider != null) pattern_OutputModuleItemProvider.dispose();
		if (pattern_ConnectorItemProvider != null) pattern_ConnectorItemProvider.dispose();
		if (pattern_RepeatItemProvider != null) pattern_RepeatItemProvider.dispose();
		if (pattern_SensorItemProvider != null) pattern_SensorItemProvider.dispose();
		if (pattern_WhileItemProvider != null) pattern_WhileItemProvider.dispose();
		if (pattern_VariableItemProvider != null) pattern_VariableItemProvider.dispose();
		if (pattern_SetItemProvider != null) pattern_SetItemProvider.dispose();
		if (pattern_NumericalOperatorItemProvider != null) pattern_NumericalOperatorItemProvider.dispose();
		if (pattern_BooleanOperatorItemProvider != null) pattern_BooleanOperatorItemProvider.dispose();
		if (pattern_ConstantItemProvider != null) pattern_ConstantItemProvider.dispose();
		if (pattern_IfItemProvider != null) pattern_IfItemProvider.dispose();
		if (pattern_FunctionItemProvider != null) pattern_FunctionItemProvider.dispose();
		if (pattern_ParameterDefinitionItemProvider != null) pattern_ParameterDefinitionItemProvider.dispose();
		if (pattern_FunctionCallItemProvider != null) pattern_FunctionCallItemProvider.dispose();
		if (pattern_ParameterCallItemProvider != null) pattern_ParameterCallItemProvider.dispose();
		if (pattern_DomainSpecificDiffItemProvider != null) pattern_DomainSpecificDiffItemProvider.dispose();
		if (pattern_DiffHardwareItemProvider != null) pattern_DiffHardwareItemProvider.dispose();
		if (pattern_DiffHardware_platformsItemProvider != null) pattern_DiffHardware_platformsItemProvider.dispose();
		if (pattern_DiffHardware_modulesItemProvider != null) pattern_DiffHardware_modulesItemProvider.dispose();
		if (pattern_DiffHardware_connectorsItemProvider != null) pattern_DiffHardware_connectorsItemProvider.dispose();
		if (pattern_DiffPlatformItemProvider != null) pattern_DiffPlatformItemProvider.dispose();
		if (pattern_DiffPlatform_digitalPinsItemProvider != null) pattern_DiffPlatform_digitalPinsItemProvider.dispose();
		if (pattern_DiffPlatform_analogPinsItemProvider != null) pattern_DiffPlatform_analogPinsItemProvider.dispose();
		if (pattern_DiffDigitalPinItemProvider != null) pattern_DiffDigitalPinItemProvider.dispose();
		if (pattern_DiffAnalogPinItemProvider != null) pattern_DiffAnalogPinItemProvider.dispose();
		if (pattern_DiffSketchItemProvider != null) pattern_DiffSketchItemProvider.dispose();
		if (pattern_DiffSketch_hardwareItemProvider != null) pattern_DiffSketch_hardwareItemProvider.dispose();
		if (pattern_DiffSketch_instructionsItemProvider != null) pattern_DiffSketch_instructionsItemProvider.dispose();
		if (pattern_DiffSketch_functionsItemProvider != null) pattern_DiffSketch_functionsItemProvider.dispose();
		if (pattern_DiffProjectItemProvider != null) pattern_DiffProjectItemProvider.dispose();
		if (pattern_DiffProject_hardwareItemProvider != null) pattern_DiffProject_hardwareItemProvider.dispose();
		if (pattern_DiffProject_sketchItemProvider != null) pattern_DiffProject_sketchItemProvider.dispose();
		if (pattern_DiffProject_modulesItemProvider != null) pattern_DiffProject_modulesItemProvider.dispose();
		if (pattern_DiffProject_platformItemProvider != null) pattern_DiffProject_platformItemProvider.dispose();
		if (pattern_DiffProject_domainspecificdiffsItemProvider != null) pattern_DiffProject_domainspecificdiffsItemProvider.dispose();
		if (pattern_DiffInstruction_previousItemProvider != null) pattern_DiffInstruction_previousItemProvider.dispose();
		if (pattern_DiffInstruction_nextItemProvider != null) pattern_DiffInstruction_nextItemProvider.dispose();
		if (pattern_DiffStatusItemProvider != null) pattern_DiffStatusItemProvider.dispose();
		if (pattern_DiffStatus_sensorItemProvider != null) pattern_DiffStatus_sensorItemProvider.dispose();
		if (pattern_DiffLevelItemProvider != null) pattern_DiffLevelItemProvider.dispose();
		if (pattern_DiffLevel_levelItemProvider != null) pattern_DiffLevel_levelItemProvider.dispose();
		if (pattern_DiffModuleInstruction_moduleItemProvider != null) pattern_DiffModuleInstruction_moduleItemProvider.dispose();
		if (pattern_DiffControl_instructionsItemProvider != null) pattern_DiffControl_instructionsItemProvider.dispose();
		if (pattern_DiffDelayItemProvider != null) pattern_DiffDelayItemProvider.dispose();
		if (pattern_DiffInputModuleItemProvider != null) pattern_DiffInputModuleItemProvider.dispose();
		if (pattern_DiffOutputModuleItemProvider != null) pattern_DiffOutputModuleItemProvider.dispose();
		if (pattern_DiffConnectorItemProvider != null) pattern_DiffConnectorItemProvider.dispose();
		if (pattern_DiffConnector_pinItemProvider != null) pattern_DiffConnector_pinItemProvider.dispose();
		if (pattern_DiffConnector_moduleItemProvider != null) pattern_DiffConnector_moduleItemProvider.dispose();
		if (pattern_DiffRepeatItemProvider != null) pattern_DiffRepeatItemProvider.dispose();
		if (pattern_DiffSensorItemProvider != null) pattern_DiffSensorItemProvider.dispose();
		if (pattern_DiffSensor_statusItemProvider != null) pattern_DiffSensor_statusItemProvider.dispose();
		if (pattern_DiffWhileItemProvider != null) pattern_DiffWhileItemProvider.dispose();
		if (pattern_DiffWhile_conditionItemProvider != null) pattern_DiffWhile_conditionItemProvider.dispose();
		if (pattern_DiffMathOperator_leftItemProvider != null) pattern_DiffMathOperator_leftItemProvider.dispose();
		if (pattern_DiffMathOperator_rightItemProvider != null) pattern_DiffMathOperator_rightItemProvider.dispose();
		if (pattern_DiffVariableItemProvider != null) pattern_DiffVariableItemProvider.dispose();
		if (pattern_DiffSetItemProvider != null) pattern_DiffSetItemProvider.dispose();
		if (pattern_DiffSet_variableItemProvider != null) pattern_DiffSet_variableItemProvider.dispose();
		if (pattern_DiffSet_valueItemProvider != null) pattern_DiffSet_valueItemProvider.dispose();
		if (pattern_DiffNumericalOperatorItemProvider != null) pattern_DiffNumericalOperatorItemProvider.dispose();
		if (pattern_DiffBooleanOperatorItemProvider != null) pattern_DiffBooleanOperatorItemProvider.dispose();
		if (pattern_DiffConstantItemProvider != null) pattern_DiffConstantItemProvider.dispose();
		if (pattern_DiffIfItemProvider != null) pattern_DiffIfItemProvider.dispose();
		if (pattern_DiffIf_conditionItemProvider != null) pattern_DiffIf_conditionItemProvider.dispose();
		if (pattern_DiffFunctionItemProvider != null) pattern_DiffFunctionItemProvider.dispose();
		if (pattern_DiffFunction_paramDefsItemProvider != null) pattern_DiffFunction_paramDefsItemProvider.dispose();
		if (pattern_DiffFunction_instructionsItemProvider != null) pattern_DiffFunction_instructionsItemProvider.dispose();
		if (pattern_DiffParameterDefinitionItemProvider != null) pattern_DiffParameterDefinitionItemProvider.dispose();
		if (pattern_DiffParameter_to_definitionItemProvider != null) pattern_DiffParameter_to_definitionItemProvider.dispose();
		if (pattern_DiffFunctionCallItemProvider != null) pattern_DiffFunctionCallItemProvider.dispose();
		if (pattern_DiffFunctionCall_definitionItemProvider != null) pattern_DiffFunctionCall_definitionItemProvider.dispose();
		if (pattern_DiffFunctionCall_parametersItemProvider != null) pattern_DiffFunctionCall_parametersItemProvider.dispose();
		if (pattern_DiffParameterCallItemProvider != null) pattern_DiffParameterCallItemProvider.dispose();
		if (pattern_DiffParameterCall_definitionItemProvider != null) pattern_DiffParameterCall_definitionItemProvider.dispose();
		if (ruleItemProvider != null) ruleItemProvider.dispose();
	}

}
