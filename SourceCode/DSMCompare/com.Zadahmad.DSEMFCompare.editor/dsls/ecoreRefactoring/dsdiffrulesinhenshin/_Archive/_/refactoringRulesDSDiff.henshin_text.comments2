ePackageImport  refactoringDiffMM

		rule extractSuperclassAttr(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "ADD"
				}
				 preserve			node n11:DiffEAttribute{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"extractSuperclassAttr\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eattributes),
			  		(delete		n2->n21:eattributes),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule extractSuperclassRef(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "ADD"
				}
				 preserve			node n11:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEReference{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"extractSuperclassRef\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:ereferences),
			  		(delete		n2->n21:ereferences),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule flattenHierarchyAttr(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "DELETE"
				}
				 delete				node n11:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n11name
				}
				 preserve			node n2:EClass
				 preserve			node n21:DiffEAttribute{
					preserve operation = "DELETE"         //ES: "ADD"
					preserve name =  n21name
				}
				 preserve			node n22:DiffEClass_esupertypes{
					preserve operation = "DELETE"
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"flattenHierarchyAttr\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:eattributes),
			  		(preserve	n2->n21:eattributes),
			  		(preserve	n2->n22:diffesupertypes), //ES: should be delete
			  		(preserve	n22->n1:eType),           //ES: should be delete 
			  		(create		n3->n1:DomainSpecificDiff_EClass),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//ES: This is still not correct. n21 is an added attribute. You should filter the inheritance link.

//----------------------------------------------------------------------

		rule flattenHierarchyRef(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "DELETE"
				}
				 delete				node n11:DiffEReference{
					delete operation = "DELETE"
					delete name =  n11name
				}
				 preserve			node n2:EClass
				 preserve			node n21:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n21name
				}
				 preserve			node n22:DiffEClass_esupertypes{
					preserve operation = "DELETE"
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"flattenHierarchyRef\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:ereferences),
			  		(preserve	n2->n21:ereferences),
			  		(preserve	n2->n22:diffesupertypes), //ES: should be delete
			  		(preserve	n22->n1:eType),           //ES: should be delete
			  		(create		n3->n1:DomainSpecificDiff_EClass),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n21:DomainSpecificDiff_EReference)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule mergeMetaclassAttr(VAR n11name:EString, VAR n21name:EString, VAR n11etype:EString, VAR n21etype:EString, VAR n31name:EString, VAR n31etype:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "DELETE"
				}
				 delete				node n11:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n11name
					delete etype =  n11etype
				}
				 preserve			node n2:DiffEClass{
					preserve operation = "DELETE"
				}
				 delete				node n21:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n21name
					delete etype =  n21etype
				}
				 preserve			node n3:DiffEClass{
					preserve operation = "ADD"
				}
				 preserve			node n31:DiffEAttribute{
					preserve operation = "ADD"
					preserve name =  n31name
					preserve etype =  n31etype
				}
				 create				node n4:DomainSpecificDiff{
					create name = "\"mergeMetaclassAttr\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(preserve	n0->n3:eclassifiers),
			  		(create		n0->n4:domainspecificdiffs),
			  		(delete		n1->n11:eattributes),
			  		(delete		n2->n21:eattributes),
			  		(preserve	n3->n31:eattributes),
			  		(create		n4->n31:DomainSpecificDiff_EAttribute),  //ES: not needed
			  		(create		n4->n1:DomainSpecificDiff_EClass),
			  		(create		n4->n3:DomainSpecificDiff_EClass),
			  		(create		n4->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name, n11etype == n21etype, n31name == n21name, n31etype == n21etype]
		}
//----------------------------------------------------------------------

		rule mergeMetaclassRef(VAR n11name:EString, VAR n21name:EString, VAR n11etype:EString, VAR n21etype:EString, VAR n31name:EString, VAR n31etype:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "DELETE"
				}
				 delete				node n11:DiffEReference{
					delete operation = "DELETE"
					delete name =  n11name
					delete etype =  n11etype
				}
				 preserve			node n2:DiffEClass{
					preserve operation = "DELETE"
				}
				 delete				node n21:DiffEReference{
					delete operation = "DELETE"
					delete name =  n21name
					delete etype =  n21etype
				}
				 preserve			node n3:DiffEClass{
					preserve operation = "ADD"
				}
				 preserve			node n31:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n31name
					preserve etype =  n31etype
				}
				 create				node n4:DomainSpecificDiff{
					create name = "\"mergeMetaclassRef\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(preserve	n0->n3:eclassifiers),
			  		(create		n0->n4:domainspecificdiffs),
			  		(delete		n1->n11:ereferences),
			  		(delete		n2->n21:ereferences),
			  		(preserve	n3->n31:ereferences),
			  		(create		n4->n1:DomainSpecificDiff_EClass),
			  		(create		n4->n3:DomainSpecificDiff_EClass),
			  		(create		n4->n2:DomainSpecificDiff_EClass),
			  		(create		n4->n31:DomainSpecificDiff_EReference)  //ES: not needed
	      		 ]
			}
			conditions [n11name == n21name, n11etype == n21etype, n31name == n21name, n31etype == n21etype]
		}
//----------------------------------------------------------------------

		rule mergeReference(VAR n11etype:EString, VAR n21etype:EString, VAR n12etype:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "DELETE"           //ES: the class is not deleted
				}
				 delete				node n11:DiffEReference{
					delete operation = "DELETE"
					delete etype =  n11etype
				}
				 preserve			node n12:DiffEReference{
					preserve operation = "ADD"
					preserve etype =  n12etype
				}
				 preserve			node n2:DiffEClass{
					preserve operation = "ADD"              //ES: the class is not added
					preserve name =  n2name
				}
				 delete				node n21:DiffEReference{
					delete operation = "ADD"                //ES: the ref is not added
					delete etype =  n21etype
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"mergeReferences\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:ereferences),
			  		(preserve	n1->n12:ereferences),
			  		(delete		n2->n21:ereferences),             //ES: preserve
			  		(create		n3->n1:DomainSpecificDiff_EClass),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n12:DomainSpecificDiff_EReference)
	      		 ]
			}
			conditions [n11etype == n21etype, n12etype == n2name]
		}
//----------------------------------------------------------------------

		rule moveAttribute(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEAttribute{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"moveAttribute\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eattributes),
			  		(delete		n2->n21:eattributes),
			  		(create		n3->n11:DomainSpecificDiff_EAttribute),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule moveMethod(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEOperation{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEOperation{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"moveMethod\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eoperations),
			  		(delete		n2->n21:eoperations),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n11:DomainSpecificDiff_EOperation)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule moveReference(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEReference{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"moveReference\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:ereferences),
			  		(delete		n2->n21:ereferences),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n11:DomainSpecificDiff_EReference)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule pullUpAttribute(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEAttribute{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pullUpAttribute\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eattributes),
			  		(delete		n2->n21:eattributes),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n11:DomainSpecificDiff_EAttribute),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule pullUpMethod(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEOperation{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEOperation{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pullUpMethod\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eoperations),
			  		(delete		n2->n21:eoperations),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n11:DomainSpecificDiff_EOperation)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule pullUpReference(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEReference{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pullUpReference\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:ereferences),
			  		(delete		n2->n21:ereferences),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n11:DomainSpecificDiff_EReference)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule pushDownAttribute(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 delete				node n11:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n11name
				}
				 preserve			node n2:EClass
				 preserve			node n21:DiffEAttribute{
					preserve operation = "ADD"
					preserve name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pushDownAttribute\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:eattributes),
			  		(preserve	n2->n21:eattributes),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n21:DomainSpecificDiff_EAttribute),
			  		(create		n3->n1:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule pushDownMethod(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 delete				node n11:DiffEOperation{
					delete operation = "DELETE"
					delete name =  n11name
				}
				 preserve			node n2:EClass
				 preserve			node n21:DiffEOperation{
					preserve operation = "ADD"
					preserve name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pushDownMethod\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:eoperations),
			  		(preserve	n2->n21:eoperations),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n1:DomainSpecificDiff_EClass),
			  		(create		n3->n21:DomainSpecificDiff_EOperation)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule pushDownReference(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 delete				node n11:DiffEReference{
					delete operation = "DELETE"
					delete name =  n11name
				}
				 preserve			node n2:EClass
				 preserve			node n21:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pushDownReference\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:ereferences),
			  		(preserve	n2->n21:ereferences),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n1:DomainSpecificDiff_EClass),
			  		(create		n3->n21:DomainSpecificDiff_EReference)
	      		 ]
			}
			conditions [n11name == n21name]
		}
//----------------------------------------------------------------------

		rule removeMiddleMan(VAR n11etype:EString, VAR nn2name:, VAR n12etype:EString, VAR nn3name:, VAR n21etype:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 delete				node n11:DiffEReference{
					delete operation = "DELETE"
					delete etype =  n11etype
				}
				 preserve			node n12:DiffEReference{
					preserve operation = "ADD"
					preserve etype =  n12etype
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEReference{
					delete operation = "DELETE"
					delete etype =  n21etype
				}
				 preserve			node n3:EClass
				 create				node n4:DomainSpecificDiff{
					create name = "\"removeMiddleMan\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(preserve	n0->n3:eclassifiers),
			  		(create		n0->n4:domainspecificdiffs),
			  		(delete		n1->n11:ereferences),
			  		(preserve	n1->n12:ereferences),
			  		(delete		n2->n21:ereferences),
			  		(create		n4->n1:DomainSpecificDiff_EClass),
			  		(create		n4->n2:DomainSpecificDiff_EClass),
			  		(create		n4->n3:DomainSpecificDiff_EClass),
			  		(create		n4->n12:DomainSpecificDiff_EReference)
	      		 ]
			}
			conditions [n11etype == nn2name, n12etype == nn3name, n21etype == nn3name]
		}
//----------------------------------------------------------------------

		rule renameAttribute(VAR n11name:EString, VAR n11new_name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEAttribute{
					preserve operation = "MODIFY"
					preserve name =  n11name
					preserve new_name =  n11new_name
				}
				 create				node n2:DomainSpecificDiff{
					create name = "\"renameAttribute\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(create		n0->n2:domainspecificdiffs),
			  		(preserve	n1->n11:eattributes),
			  		(create		n2->n11:DomainSpecificDiff_EAttribute),
			  		(create		n2->n1:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name != n11new_name, n11new_name  != "\"\"" ]
		}
//----------------------------------------------------------------------

		rule renameMethod(VAR n11name:EString, VAR n11new_name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEOperation{
					preserve operation = "MODIFY"
					preserve name =  n11name
					preserve new_name =  n11new_name
				}
				 create				node n2:DomainSpecificDiff{
					create name = "\"renameMethod\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(create		n0->n2:domainspecificdiffs),
			  		(preserve	n1->n11:eoperations),
			  		(create		n2->n1:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name != n11new_name, n11new_name  != "\"\"" ]
		}
//----------------------------------------------------------------------

		rule renameReference(VAR n11name:EString, VAR n11new_name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEReference{
					preserve operation = "MODIFY"
					preserve name =  n11name
					preserve new_name =  n11new_name
				}
				 create				node n2:DomainSpecificDiff{
					create name = "\"renameReference\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(create		n0->n2:domainspecificdiffs),
			  		(preserve	n1->n11:ereferences),
			  		(create		n2->n1:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name != n11new_name, n11new_name  != "\"\"" ]
		}
//----------------------------------------------------------------------

	unit unitSequntialStar(){
		while{
			extractSuperclassAttr()
		}
		while{
			extractSuperclassRef()
		}
		while{
			flattenHierarchyAttr()
		}
		while{
			flattenHierarchyRef()
		}
		while{
			mergeMetaclassAttr()
		}
		while{
			mergeMetaclassRef()
		}
		while{
			mergeReference()
		}
		while{
			moveAttribute()
		}
		while{
			moveMethod()
		}
		while{
			moveReference()
		}
		while{
			pullUpAttribute()
		}
		while{
			pullUpMethod()
		}
		while{
			pullUpReference()
		}
		while{
			pushDownAttribute()
		}
		while{
			pushDownMethod()
		}
		while{
			pushDownReference()
		}
		while{
			removeMiddleMan()
		}
		while{
			renameAttribute()
		}
		while{
			renameMethod()
		}
		while{
			renameReference()
		}
	}