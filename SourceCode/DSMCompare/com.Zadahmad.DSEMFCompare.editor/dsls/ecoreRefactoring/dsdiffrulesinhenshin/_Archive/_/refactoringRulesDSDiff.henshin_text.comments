//ES: I am assuming that delete means filter=true

ePackageImport  refactoringDiffMM

		rule extractSuperclassAttr(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "ADD"
				}
				 preserve			node n11:DiffEAttribute{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"extractSuperclassAttr\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eattributes),
			  		(delete		n2->n21:eattributes),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: CORRECT. Do you need to check that super classes n2 are now superclasses of n1? Maybe you can then filter also the old superclasses of n2
//----------------------------------------------------------------------

		rule extractSuperclassRef(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "ADD"
				}
				 preserve			node n11:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEReference{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"extractSuperclassRef\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:ereferences),
			  		(delete		n2->n21:ereferences),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct. Do you need to check that super classes n2 are now superclasses of n1? Maybe you can then filter also the old superclasses of n2
//----------------------------------------------------------------------

		rule flattenHierarchy(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:DiffEClass{
					preserve operation = "DELETE"
				}
				 delete				node n11:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n11name
				}
				 preserve			node n2:EClass
				 preserve			node n21:DiffEAttribute{
					preserve operation = "DELETE" //ES: "ADD"
					preserve name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"flattenHierarchy\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:eattributes),
			  		(preserve	n2->n21:eattributes),
			  		(create		n3->n1:DomainSpecificDiff_EClass),  //ES: Remove, you cannot reference a deleted object
			  		(create		n3->n2:DomainSpecificDiff_EClass)
            //ES: Add (delete n2->n1:esupertypes)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: what about references of n1? What about supertypes of n1?
    
//----------------------------------------------------------------------

		rule moveAttribute(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEAttribute{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"moveAttribute\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eattributes),
			  		(delete		n2->n21:eattributes),
			  		(create		n3->n11:DomainSpecificDiff_EAttribute),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct
//----------------------------------------------------------------------

		rule moveMethod(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEOperation{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEOperation{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"moveMethod\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eoperations),
			  		(delete		n2->n21:eoperations),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n11:DomainSpecificDiff_EOperation)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct
//----------------------------------------------------------------------

		rule moveReference(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEReference{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"moveReference\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:ereferences),
			  		(delete		n2->n21:ereferences),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n11:DomainSpecificDiff_EReference)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct
//----------------------------------------------------------------------

		rule pullUpAttribute(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEAttribute{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pullUpAttribute\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eattributes),
			  		(delete		n2->n21:eattributes),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n11:DomainSpecificDiff_EAttribute),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct
//----------------------------------------------------------------------

		rule pullUpMethod(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEOperation{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEOperation{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pullUpMethod\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:eoperations),
			  		(delete		n2->n21:eoperations),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n11:DomainSpecificDiff_EOperation)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct
//----------------------------------------------------------------------

		rule pullUpReference(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n11name
				}
				 preserve			node n2:EClass
				 delete				node n21:DiffEReference{
					delete operation = "DELETE"
					delete name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pullUpReference\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(preserve	n1->n11:ereferences),
			  		(delete		n2->n21:ereferences),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n2:DomainSpecificDiff_EClass),
			  		(create		n3->n11:DomainSpecificDiff_EReference)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct
//----------------------------------------------------------------------

		rule pushDownAttribute(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 delete				node n11:DiffEAttribute{
					delete operation = "DELETE"
					delete name =  n11name
				}
				 preserve			node n2:EClass
				 preserve			node n21:DiffEAttribute{
					preserve operation = "ADD"
					preserve name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pushDownAttribute\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:eattributes),
			  		(preserve	n2->n21:eattributes),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n21:DomainSpecificDiff_EAttribute),
			  		(create		n3->n1:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct
//----------------------------------------------------------------------

		rule pushDownMethod(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 delete				node n11:DiffEOperation{
					delete operation = "DELETE"
					delete name =  n11name
				}
				 preserve			node n2:EClass
				 preserve			node n21:DiffEOperation{
					preserve operation = "ADD"
					preserve name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pushDownMethod\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:eoperations),
			  		(preserve	n2->n21:eoperations),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n1:DomainSpecificDiff_EClass),
			  		(create		n3->n21:DomainSpecificDiff_EOperation)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct
//----------------------------------------------------------------------

		rule pushDownReference(VAR n11name:EString, VAR n21name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 delete				node n11:DiffEReference{
					delete operation = "DELETE"
					delete name =  n11name
				}
				 preserve			node n2:EClass
				 preserve			node n21:DiffEReference{
					preserve operation = "ADD"
					preserve name =  n21name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"pushDownReference\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:ereferences),
			  		(preserve	n2->n21:ereferences),
			  		(preserve	n2->n1:esupertypes),
			  		(create		n3->n1:DomainSpecificDiff_EClass),
			  		(create		n3->n21:DomainSpecificDiff_EReference)
	      		 ]
			}
			conditions [n11name == n21name]
		}
    //ES: correct
//----------------------------------------------------------------------

		rule removeMiddleMan(VAR n11etype:EString, VAR n2name:EString, VAR n22etype:EString, VAR n11name:EString, VAR n22name:EString)
		{
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 delete				node n11:DiffEOperation{
					delete operation = "DELETE"
					delete etype =  n11etype
					delete name =  n11name
				}
				 preserve			node n2:EClass{
					preserve name =  n2name
				}
				 delete				node n21:EAttribute
				 preserve			node n22:DiffEOperation{
					preserve operation = "ADD"
					preserve etype =  n22etype
					preserve name =  n22name
				}
				 create				node n3:DomainSpecificDiff{
					create name = "\"removeMiddleMan\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(preserve	n0->n2:eclassifiers),
			  		(create		n0->n3:domainspecificdiffs),
			  		(delete		n1->n11:eoperations),
			  		(delete		n2->n21:eattributes),
			  		(preserve	n2->n22:eoperations),
			  		(create		n3->n1:DomainSpecificDiff_EClass),
			  		(create		n3->n2:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11etype == n2name, n11etype == n22etype, n11name == n22name]
		}
    //ES: for metamodels, I think this one should be like n1-ref1->n2-ref2->n3 => n1-ref3->n3
    // Suppose 3 classes n1,n2,n3 and 3 references n11 from n1 to n2, n21 from n2 to n3, n12 from n1 to n3
    // preserve n1; delete n11 (op="DELETE"); preserve n12  (op="ADD"); preserve n2; delete n21 (op="DELETE"); preserve n3
//----------------------------------------------------------------------

		rule renameField(VAR n11name:EString, VAR n11new_name:EString)  //ES: should be called renameAttr
		{                     
			graph
			{
				 preserve			node n0:EPackage
				 preserve			node n1:EClass
				 preserve			node n11:DiffEAttribute{
					preserve operation = "MODIFY"
					preserve name =  n11name
					preserve new_name =  n11new_name
				}
				 create				node n2:DomainSpecificDiff{
					create name = "\"renameField\""   //ES: create name = "\"renameAttr\""
				}
			edges[
			  		(preserve	n0->n1:eclassifiers),
			  		(create		n0->n2:domainspecificdiffs),
			  		(preserve	n1->n11:eattributes),
			  		(create		n2->n11:DomainSpecificDiff_EAttribute),
			  		(create		n2->n1:DomainSpecificDiff_EClass)
	      		 ]
			}
			conditions [n11name != n11new_name, n11new_name  != "\"\"" ]
		}
    //ES: You should have two other rules: renameMethod, renameReference
    
    
    //ES: implement mergeClass http://www.metamodelrefactoring.org/?p=377
    //ES: implement mergeReference http://www.metamodelrefactoring.org/?p=406
//----------------------------------------------------------------------

	unit unitSequntialStar(){
		while{
			extractSuperclassAttr()
		}
		while{
			extractSuperclassRef()
		}
		while{
			flattenHierarchy()
		}
		while{
			moveAttribute()
		}
		while{
			moveMethod()
		}
		while{
			moveReference()
		}
		while{
			pullUpAttribute()
		}
		while{
			pullUpMethod()
		}
		while{
			pullUpReference()
		}
		while{
			pushDownAttribute()
		}
		while{
			pushDownMethod()
		}
		while{
			pushDownReference()
		}
		while{
			removeMiddleMan()
		}
		while{
			renameField()
		}
	}